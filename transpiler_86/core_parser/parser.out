Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    DEC
    DIV_DEC
    MUL_INC
    NULL
    OR

Grammar

Rule 0     S' -> program
Rule 1     package_statement_or_empty -> package_statement
Rule 2     package_statement_or_empty -> empty
Rule 3     statement_without_semicolon -> variable_declaration
Rule 4     statement_without_semicolon -> variable_initialization
Rule 5     statement_without_semicolon -> expression_statement
Rule 6     statement_without_semicolon -> return_statement
Rule 7     statement_without_semicolon -> variable_increment
Rule 8     statement_with_semicolon_or_comment -> statement_without_semicolon ;
Rule 9     statement_with_semicolon_or_comment -> if_statement
Rule 10    statement_with_semicolon_or_comment -> while_statement
Rule 11    statement_with_semicolon_or_comment -> comment_statement
Rule 12    package_statement -> PACKAGE qualified_identifier ;
Rule 13    expression -> expression + expression
Rule 14    expression -> expression - expression
Rule 15    expression -> expression * expression
Rule 16    expression -> expression / expression
Rule 17    expression -> expression % expression
Rule 18    expression -> ( expression )
Rule 19    expression -> factor
Rule 20    comment_list -> comment
Rule 21    comment_list -> comment comment_list
Rule 22    variable_declaration -> variable_type identifier
Rule 23    if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty
Rule 24    program -> class_declaration_with_comments
Rule 25    pre_class_declaration_list -> pre_class_declaration
Rule 26    pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration
Rule 27    variable_initialization -> variable_type identifier = expression
Rule 28    comparison_expression -> comparison_expression = = comparison_expression
Rule 29    comparison_expression -> comparison_expression ! = comparison_expression
Rule 30    comparison_expression -> comparison_expression > = comparison_expression
Rule 31    comparison_expression -> comparison_expression < = comparison_expression
Rule 32    comparison_expression -> comparison_expression < comparison_expression
Rule 33    comparison_expression -> comparison_expression > comparison_expression
Rule 34    comparison_expression -> TRUE
Rule 35    comparison_expression -> FALSE
Rule 36    comment -> SINGLE_LINE_COMMENT
Rule 37    comment -> multi_line_comment
Rule 38    class_declaration -> class_modifier_list CLASS identifier extends_or_empty { class_body }
Rule 39    pre_class_declaration -> comment_list
Rule 40    pre_class_declaration -> import_statement
Rule 41    pre_class_declaration -> empty
Rule 42    class_declaration_with_comments -> package_statement_or_empty pre_class_declaration_list class_declaration comment_list_or_empty
Rule 43    expression_statement -> expression
Rule 44    multi_line_comment -> MULTI_LINE_COMMENT
Rule 45    class_modifier_list -> class_modifier
Rule 46    class_modifier_list -> class_modifier_list class_modifier
Rule 47    factor -> DEC_LIT
Rule 48    factor -> FLOAT_LIT
Rule 49    factor -> STR_LIT
Rule 50    factor -> CHAR_LIT
Rule 51    factor -> unary_minus
Rule 52    factor -> qualified_identifier
Rule 53    factor -> method_call
Rule 54    factor -> new_statement
Rule 55    import_statement -> IMPORT qualified_identifier ;
Rule 56    return_statement -> RETURN expression
Rule 57    return_statement -> RETURN empty
Rule 58    variable_type -> identifier
Rule 59    variable_type -> BYTE
Rule 60    variable_type -> SHORT
Rule 61    variable_type -> CHAR
Rule 62    variable_type -> INT
Rule 63    variable_type -> LONG
Rule 64    variable_type -> FLOAT
Rule 65    variable_type -> DOUBLE
Rule 66    variable_type -> BOOLEAN
Rule 67    variable_type -> array_type
Rule 68    variable_increment -> identifier + +
Rule 69    variable_increment -> identifier INC expression
Rule 70    class_modifier -> PUBLIC
Rule 71    class_modifier -> PRIVATE
Rule 72    class_modifier -> VOID
Rule 73    class_modifier -> STATIC
Rule 74    class_modifier -> variable_type
Rule 75    unary_minus -> - DEC_LIT
Rule 76    unary_minus -> - FLOAT_LIT
Rule 77    else_statement_or_empty -> ELSE { statement_list_or_empty }
Rule 78    else_statement_or_empty -> empty
Rule 79    extends_or_empty -> EXTENDS qualified_identifier
Rule 80    extends_or_empty -> empty
Rule 81    identifier -> ID
Rule 82    method_call -> qualified_identifier ( argument_list )
Rule 83    array_type -> variable_type [ ]
Rule 84    while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty }
Rule 85    class_body -> method_list_or_empty
Rule 86    argument_list -> expression
Rule 87    argument_list -> expression , argument_list
Rule 88    argument_list -> empty
Rule 89    qualified_identifier -> identifier
Rule 90    qualified_identifier -> identifier . qualified_identifier
Rule 91    comment_statement -> comment
Rule 92    method_list_or_empty -> method_list
Rule 93    method_list_or_empty -> empty
Rule 94    new_statement -> NEW qualified_identifier ( argument_list )
Rule 95    empty -> <empty>
Rule 96    method_list -> method_or_comment
Rule 97    method_list -> method_list method_or_comment
Rule 98    comment_list_or_empty -> comment_list
Rule 99    comment_list_or_empty -> empty
Rule 100   method_or_comment -> field
Rule 101   method_or_comment -> method
Rule 102   method_or_comment -> comment
Rule 103   field -> class_modifier_list identifier = expression ;
Rule 104   method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty }
Rule 105   parameter_list_or_empty -> parameter_list
Rule 106   parameter_list_or_empty -> empty
Rule 107   parameter_list -> parameter_with_type
Rule 108   parameter_list -> parameter_with_type , parameter_list
Rule 109   parameter_with_type -> variable_type identifier
Rule 110   statement_list_or_empty -> statement_list
Rule 111   statement_list_or_empty -> empty
Rule 112   statement_list -> statement_with_semicolon_or_comment
Rule 113   statement_list -> statement_list statement_with_semicolon_or_comment

Terminals, with rules where they appear

!                    : 29
%                    : 17
(                    : 18 23 82 84 94 104
)                    : 18 23 82 84 94 104
*                    : 15
+                    : 13 68 68
,                    : 87 108
-                    : 14 75 76
.                    : 90
/                    : 16
;                    : 8 12 55 103
<                    : 31 32
=                    : 27 28 28 29 30 31 103
>                    : 30 33
AND                  : 
BOOLEAN              : 66
BYTE                 : 59
CHAR                 : 61
CHAR_LIT             : 50
CLASS                : 38
DEC                  : 
DEC_LIT              : 47 75
DIV_DEC              : 
DOUBLE               : 65
ELSE                 : 77
EXTENDS              : 79
FALSE                : 35
FLOAT                : 64
FLOAT_LIT            : 48 76
ID                   : 81
IF                   : 23
IMPORT               : 55
INC                  : 69
INT                  : 62
LONG                 : 63
MULTI_LINE_COMMENT   : 44
MUL_INC              : 
NEW                  : 94
NULL                 : 
OR                   : 
PACKAGE              : 12
PRIVATE              : 71
PUBLIC               : 70
RETURN               : 56 57
SHORT                : 60
SINGLE_LINE_COMMENT  : 36
STATIC               : 73
STR_LIT              : 49
TRUE                 : 34
VOID                 : 72
WHILE                : 84
[                    : 83
]                    : 83
error                : 
{                    : 23 38 77 84 104
}                    : 23 38 77 84 104

Nonterminals, with rules where they appear

argument_list        : 82 87 94
array_type           : 67
class_body           : 38
class_declaration    : 42
class_declaration_with_comments : 24
class_modifier       : 45 46
class_modifier_list  : 38 46 103 104
comment              : 20 21 91 102
comment_list         : 21 39 98
comment_list_or_empty : 42
comment_statement    : 11
comparison_expression : 23 28 28 29 29 30 30 31 31 32 32 33 33 84
else_statement_or_empty : 23
empty                : 2 41 57 78 80 88 93 99 106 111
expression           : 13 13 14 14 15 15 16 16 17 17 18 27 43 56 69 86 87 103
expression_statement : 5
extends_or_empty     : 38
factor               : 19
field                : 100
identifier           : 22 27 38 58 68 69 89 90 103 104 109
if_statement         : 9
import_statement     : 40
method               : 101
method_call          : 53
method_list          : 92 97
method_list_or_empty : 85
method_or_comment    : 96 97
multi_line_comment   : 37
new_statement        : 54
package_statement    : 1
package_statement_or_empty : 42
parameter_list       : 105 108
parameter_list_or_empty : 104
parameter_with_type  : 107 108
pre_class_declaration : 25 26
pre_class_declaration_list : 26 42
program              : 0
qualified_identifier : 12 52 55 79 82 90 94
return_statement     : 6
statement_list       : 110 113
statement_list_or_empty : 23 77 84 104
statement_with_semicolon_or_comment : 112 113
statement_without_semicolon : 8
unary_minus          : 51
variable_declaration : 3
variable_increment   : 7
variable_initialization : 4
variable_type        : 22 27 74 83 109
while_statement      : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (24) program -> . class_declaration_with_comments
    (42) class_declaration_with_comments -> . package_statement_or_empty pre_class_declaration_list class_declaration comment_list_or_empty
    (1) package_statement_or_empty -> . package_statement
    (2) package_statement_or_empty -> . empty
    (12) package_statement -> . PACKAGE qualified_identifier ;
    (95) empty -> .

    PACKAGE         shift and go to state 6
    IMPORT          reduce using rule 95 (empty -> .)
    SINGLE_LINE_COMMENT reduce using rule 95 (empty -> .)
    MULTI_LINE_COMMENT reduce using rule 95 (empty -> .)
    PUBLIC          reduce using rule 95 (empty -> .)
    PRIVATE         reduce using rule 95 (empty -> .)
    VOID            reduce using rule 95 (empty -> .)
    STATIC          reduce using rule 95 (empty -> .)
    BYTE            reduce using rule 95 (empty -> .)
    SHORT           reduce using rule 95 (empty -> .)
    CHAR            reduce using rule 95 (empty -> .)
    INT             reduce using rule 95 (empty -> .)
    LONG            reduce using rule 95 (empty -> .)
    FLOAT           reduce using rule 95 (empty -> .)
    DOUBLE          reduce using rule 95 (empty -> .)
    BOOLEAN         reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)

    program                        shift and go to state 1
    class_declaration_with_comments shift and go to state 2
    package_statement_or_empty     shift and go to state 3
    package_statement              shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (24) program -> class_declaration_with_comments .

    $end            reduce using rule 24 (program -> class_declaration_with_comments .)


state 3

    (42) class_declaration_with_comments -> package_statement_or_empty . pre_class_declaration_list class_declaration comment_list_or_empty
    (25) pre_class_declaration_list -> . pre_class_declaration
    (26) pre_class_declaration_list -> . pre_class_declaration_list pre_class_declaration
    (39) pre_class_declaration -> . comment_list
    (40) pre_class_declaration -> . import_statement
    (41) pre_class_declaration -> . empty
    (20) comment_list -> . comment
    (21) comment_list -> . comment comment_list
    (55) import_statement -> . IMPORT qualified_identifier ;
    (95) empty -> .
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (44) multi_line_comment -> . MULTI_LINE_COMMENT

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for SINGLE_LINE_COMMENT resolved as shift
  ! shift/reduce conflict for MULTI_LINE_COMMENT resolved as shift
    IMPORT          shift and go to state 13
    PUBLIC          reduce using rule 95 (empty -> .)
    PRIVATE         reduce using rule 95 (empty -> .)
    VOID            reduce using rule 95 (empty -> .)
    STATIC          reduce using rule 95 (empty -> .)
    BYTE            reduce using rule 95 (empty -> .)
    SHORT           reduce using rule 95 (empty -> .)
    CHAR            reduce using rule 95 (empty -> .)
    INT             reduce using rule 95 (empty -> .)
    LONG            reduce using rule 95 (empty -> .)
    FLOAT           reduce using rule 95 (empty -> .)
    DOUBLE          reduce using rule 95 (empty -> .)
    BOOLEAN         reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    SINGLE_LINE_COMMENT shift and go to state 14
    MULTI_LINE_COMMENT shift and go to state 16

  ! IMPORT          [ reduce using rule 95 (empty -> .) ]
  ! SINGLE_LINE_COMMENT [ reduce using rule 95 (empty -> .) ]
  ! MULTI_LINE_COMMENT [ reduce using rule 95 (empty -> .) ]

    pre_class_declaration_list     shift and go to state 7
    pre_class_declaration          shift and go to state 8
    comment_list                   shift and go to state 9
    import_statement               shift and go to state 10
    empty                          shift and go to state 11
    comment                        shift and go to state 12
    multi_line_comment             shift and go to state 15

state 4

    (1) package_statement_or_empty -> package_statement .

    IMPORT          reduce using rule 1 (package_statement_or_empty -> package_statement .)
    SINGLE_LINE_COMMENT reduce using rule 1 (package_statement_or_empty -> package_statement .)
    MULTI_LINE_COMMENT reduce using rule 1 (package_statement_or_empty -> package_statement .)
    PUBLIC          reduce using rule 1 (package_statement_or_empty -> package_statement .)
    PRIVATE         reduce using rule 1 (package_statement_or_empty -> package_statement .)
    VOID            reduce using rule 1 (package_statement_or_empty -> package_statement .)
    STATIC          reduce using rule 1 (package_statement_or_empty -> package_statement .)
    BYTE            reduce using rule 1 (package_statement_or_empty -> package_statement .)
    SHORT           reduce using rule 1 (package_statement_or_empty -> package_statement .)
    CHAR            reduce using rule 1 (package_statement_or_empty -> package_statement .)
    INT             reduce using rule 1 (package_statement_or_empty -> package_statement .)
    LONG            reduce using rule 1 (package_statement_or_empty -> package_statement .)
    FLOAT           reduce using rule 1 (package_statement_or_empty -> package_statement .)
    DOUBLE          reduce using rule 1 (package_statement_or_empty -> package_statement .)
    BOOLEAN         reduce using rule 1 (package_statement_or_empty -> package_statement .)
    ID              reduce using rule 1 (package_statement_or_empty -> package_statement .)


state 5

    (2) package_statement_or_empty -> empty .

    IMPORT          reduce using rule 2 (package_statement_or_empty -> empty .)
    SINGLE_LINE_COMMENT reduce using rule 2 (package_statement_or_empty -> empty .)
    MULTI_LINE_COMMENT reduce using rule 2 (package_statement_or_empty -> empty .)
    PUBLIC          reduce using rule 2 (package_statement_or_empty -> empty .)
    PRIVATE         reduce using rule 2 (package_statement_or_empty -> empty .)
    VOID            reduce using rule 2 (package_statement_or_empty -> empty .)
    STATIC          reduce using rule 2 (package_statement_or_empty -> empty .)
    BYTE            reduce using rule 2 (package_statement_or_empty -> empty .)
    SHORT           reduce using rule 2 (package_statement_or_empty -> empty .)
    CHAR            reduce using rule 2 (package_statement_or_empty -> empty .)
    INT             reduce using rule 2 (package_statement_or_empty -> empty .)
    LONG            reduce using rule 2 (package_statement_or_empty -> empty .)
    FLOAT           reduce using rule 2 (package_statement_or_empty -> empty .)
    DOUBLE          reduce using rule 2 (package_statement_or_empty -> empty .)
    BOOLEAN         reduce using rule 2 (package_statement_or_empty -> empty .)
    ID              reduce using rule 2 (package_statement_or_empty -> empty .)


state 6

    (12) package_statement -> PACKAGE . qualified_identifier ;
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (81) identifier -> . ID

    ID              shift and go to state 19

    qualified_identifier           shift and go to state 17
    identifier                     shift and go to state 18

state 7

    (42) class_declaration_with_comments -> package_statement_or_empty pre_class_declaration_list . class_declaration comment_list_or_empty
    (26) pre_class_declaration_list -> pre_class_declaration_list . pre_class_declaration
    (38) class_declaration -> . class_modifier_list CLASS identifier extends_or_empty { class_body }
    (39) pre_class_declaration -> . comment_list
    (40) pre_class_declaration -> . import_statement
    (41) pre_class_declaration -> . empty
    (45) class_modifier_list -> . class_modifier
    (46) class_modifier_list -> . class_modifier_list class_modifier
    (20) comment_list -> . comment
    (21) comment_list -> . comment comment_list
    (55) import_statement -> . IMPORT qualified_identifier ;
    (95) empty -> .
    (70) class_modifier -> . PUBLIC
    (71) class_modifier -> . PRIVATE
    (72) class_modifier -> . VOID
    (73) class_modifier -> . STATIC
    (74) class_modifier -> . variable_type
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (44) multi_line_comment -> . MULTI_LINE_COMMENT
    (81) identifier -> . ID
    (83) array_type -> . variable_type [ ]

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for SINGLE_LINE_COMMENT resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for MULTI_LINE_COMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    IMPORT          shift and go to state 13
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26
    VOID            shift and go to state 27
    STATIC          shift and go to state 28
    SINGLE_LINE_COMMENT shift and go to state 14
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    MULTI_LINE_COMMENT shift and go to state 16
    ID              shift and go to state 19

  ! IMPORT          [ reduce using rule 95 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 95 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 95 (empty -> .) ]
  ! VOID            [ reduce using rule 95 (empty -> .) ]
  ! STATIC          [ reduce using rule 95 (empty -> .) ]
  ! SINGLE_LINE_COMMENT [ reduce using rule 95 (empty -> .) ]
  ! BYTE            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 95 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 95 (empty -> .) ]
  ! MULTI_LINE_COMMENT [ reduce using rule 95 (empty -> .) ]
  ! ID              [ reduce using rule 95 (empty -> .) ]

    class_declaration              shift and go to state 20
    pre_class_declaration          shift and go to state 21
    class_modifier_list            shift and go to state 22
    identifier                     shift and go to state 23
    comment_list                   shift and go to state 9
    import_statement               shift and go to state 10
    empty                          shift and go to state 11
    class_modifier                 shift and go to state 24
    comment                        shift and go to state 12
    variable_type                  shift and go to state 29
    multi_line_comment             shift and go to state 15
    array_type                     shift and go to state 38

state 8

    (25) pre_class_declaration_list -> pre_class_declaration .

    IMPORT          reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    PUBLIC          reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    PRIVATE         reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    VOID            reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    STATIC          reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    SINGLE_LINE_COMMENT reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    BYTE            reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    SHORT           reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    CHAR            reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    INT             reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    LONG            reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    FLOAT           reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    DOUBLE          reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    BOOLEAN         reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    MULTI_LINE_COMMENT reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)
    ID              reduce using rule 25 (pre_class_declaration_list -> pre_class_declaration .)


state 9

    (39) pre_class_declaration -> comment_list .

    IMPORT          reduce using rule 39 (pre_class_declaration -> comment_list .)
    PUBLIC          reduce using rule 39 (pre_class_declaration -> comment_list .)
    PRIVATE         reduce using rule 39 (pre_class_declaration -> comment_list .)
    VOID            reduce using rule 39 (pre_class_declaration -> comment_list .)
    STATIC          reduce using rule 39 (pre_class_declaration -> comment_list .)
    SINGLE_LINE_COMMENT reduce using rule 39 (pre_class_declaration -> comment_list .)
    BYTE            reduce using rule 39 (pre_class_declaration -> comment_list .)
    SHORT           reduce using rule 39 (pre_class_declaration -> comment_list .)
    CHAR            reduce using rule 39 (pre_class_declaration -> comment_list .)
    INT             reduce using rule 39 (pre_class_declaration -> comment_list .)
    LONG            reduce using rule 39 (pre_class_declaration -> comment_list .)
    FLOAT           reduce using rule 39 (pre_class_declaration -> comment_list .)
    DOUBLE          reduce using rule 39 (pre_class_declaration -> comment_list .)
    BOOLEAN         reduce using rule 39 (pre_class_declaration -> comment_list .)
    MULTI_LINE_COMMENT reduce using rule 39 (pre_class_declaration -> comment_list .)
    ID              reduce using rule 39 (pre_class_declaration -> comment_list .)


state 10

    (40) pre_class_declaration -> import_statement .

    IMPORT          reduce using rule 40 (pre_class_declaration -> import_statement .)
    PUBLIC          reduce using rule 40 (pre_class_declaration -> import_statement .)
    PRIVATE         reduce using rule 40 (pre_class_declaration -> import_statement .)
    VOID            reduce using rule 40 (pre_class_declaration -> import_statement .)
    STATIC          reduce using rule 40 (pre_class_declaration -> import_statement .)
    SINGLE_LINE_COMMENT reduce using rule 40 (pre_class_declaration -> import_statement .)
    BYTE            reduce using rule 40 (pre_class_declaration -> import_statement .)
    SHORT           reduce using rule 40 (pre_class_declaration -> import_statement .)
    CHAR            reduce using rule 40 (pre_class_declaration -> import_statement .)
    INT             reduce using rule 40 (pre_class_declaration -> import_statement .)
    LONG            reduce using rule 40 (pre_class_declaration -> import_statement .)
    FLOAT           reduce using rule 40 (pre_class_declaration -> import_statement .)
    DOUBLE          reduce using rule 40 (pre_class_declaration -> import_statement .)
    BOOLEAN         reduce using rule 40 (pre_class_declaration -> import_statement .)
    MULTI_LINE_COMMENT reduce using rule 40 (pre_class_declaration -> import_statement .)
    ID              reduce using rule 40 (pre_class_declaration -> import_statement .)


state 11

    (41) pre_class_declaration -> empty .

    IMPORT          reduce using rule 41 (pre_class_declaration -> empty .)
    PUBLIC          reduce using rule 41 (pre_class_declaration -> empty .)
    PRIVATE         reduce using rule 41 (pre_class_declaration -> empty .)
    VOID            reduce using rule 41 (pre_class_declaration -> empty .)
    STATIC          reduce using rule 41 (pre_class_declaration -> empty .)
    SINGLE_LINE_COMMENT reduce using rule 41 (pre_class_declaration -> empty .)
    BYTE            reduce using rule 41 (pre_class_declaration -> empty .)
    SHORT           reduce using rule 41 (pre_class_declaration -> empty .)
    CHAR            reduce using rule 41 (pre_class_declaration -> empty .)
    INT             reduce using rule 41 (pre_class_declaration -> empty .)
    LONG            reduce using rule 41 (pre_class_declaration -> empty .)
    FLOAT           reduce using rule 41 (pre_class_declaration -> empty .)
    DOUBLE          reduce using rule 41 (pre_class_declaration -> empty .)
    BOOLEAN         reduce using rule 41 (pre_class_declaration -> empty .)
    MULTI_LINE_COMMENT reduce using rule 41 (pre_class_declaration -> empty .)
    ID              reduce using rule 41 (pre_class_declaration -> empty .)


state 12

    (20) comment_list -> comment .
    (21) comment_list -> comment . comment_list
    (20) comment_list -> . comment
    (21) comment_list -> . comment comment_list
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (44) multi_line_comment -> . MULTI_LINE_COMMENT

  ! shift/reduce conflict for SINGLE_LINE_COMMENT resolved as shift
  ! shift/reduce conflict for MULTI_LINE_COMMENT resolved as shift
    IMPORT          reduce using rule 20 (comment_list -> comment .)
    PUBLIC          reduce using rule 20 (comment_list -> comment .)
    PRIVATE         reduce using rule 20 (comment_list -> comment .)
    VOID            reduce using rule 20 (comment_list -> comment .)
    STATIC          reduce using rule 20 (comment_list -> comment .)
    BYTE            reduce using rule 20 (comment_list -> comment .)
    SHORT           reduce using rule 20 (comment_list -> comment .)
    CHAR            reduce using rule 20 (comment_list -> comment .)
    INT             reduce using rule 20 (comment_list -> comment .)
    LONG            reduce using rule 20 (comment_list -> comment .)
    FLOAT           reduce using rule 20 (comment_list -> comment .)
    DOUBLE          reduce using rule 20 (comment_list -> comment .)
    BOOLEAN         reduce using rule 20 (comment_list -> comment .)
    ID              reduce using rule 20 (comment_list -> comment .)
    $end            reduce using rule 20 (comment_list -> comment .)
    SINGLE_LINE_COMMENT shift and go to state 14
    MULTI_LINE_COMMENT shift and go to state 16

  ! SINGLE_LINE_COMMENT [ reduce using rule 20 (comment_list -> comment .) ]
  ! MULTI_LINE_COMMENT [ reduce using rule 20 (comment_list -> comment .) ]

    comment                        shift and go to state 12
    comment_list                   shift and go to state 39
    multi_line_comment             shift and go to state 15

state 13

    (55) import_statement -> IMPORT . qualified_identifier ;
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (81) identifier -> . ID

    ID              shift and go to state 19

    qualified_identifier           shift and go to state 40
    identifier                     shift and go to state 18

state 14

    (36) comment -> SINGLE_LINE_COMMENT .

    SINGLE_LINE_COMMENT reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    IMPORT          reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    PUBLIC          reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    PRIVATE         reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    VOID            reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    STATIC          reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    BYTE            reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    SHORT           reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    CHAR            reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    INT             reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    LONG            reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    FLOAT           reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    DOUBLE          reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    BOOLEAN         reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    ID              reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    $end            reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    }               reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    IF              reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    WHILE           reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    RETURN          reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    (               reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    DEC_LIT         reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    FLOAT_LIT       reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    STR_LIT         reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    CHAR_LIT        reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    -               reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)
    NEW             reduce using rule 36 (comment -> SINGLE_LINE_COMMENT .)


state 15

    (37) comment -> multi_line_comment .

    SINGLE_LINE_COMMENT reduce using rule 37 (comment -> multi_line_comment .)
    MULTI_LINE_COMMENT reduce using rule 37 (comment -> multi_line_comment .)
    IMPORT          reduce using rule 37 (comment -> multi_line_comment .)
    PUBLIC          reduce using rule 37 (comment -> multi_line_comment .)
    PRIVATE         reduce using rule 37 (comment -> multi_line_comment .)
    VOID            reduce using rule 37 (comment -> multi_line_comment .)
    STATIC          reduce using rule 37 (comment -> multi_line_comment .)
    BYTE            reduce using rule 37 (comment -> multi_line_comment .)
    SHORT           reduce using rule 37 (comment -> multi_line_comment .)
    CHAR            reduce using rule 37 (comment -> multi_line_comment .)
    INT             reduce using rule 37 (comment -> multi_line_comment .)
    LONG            reduce using rule 37 (comment -> multi_line_comment .)
    FLOAT           reduce using rule 37 (comment -> multi_line_comment .)
    DOUBLE          reduce using rule 37 (comment -> multi_line_comment .)
    BOOLEAN         reduce using rule 37 (comment -> multi_line_comment .)
    ID              reduce using rule 37 (comment -> multi_line_comment .)
    $end            reduce using rule 37 (comment -> multi_line_comment .)
    }               reduce using rule 37 (comment -> multi_line_comment .)
    IF              reduce using rule 37 (comment -> multi_line_comment .)
    WHILE           reduce using rule 37 (comment -> multi_line_comment .)
    RETURN          reduce using rule 37 (comment -> multi_line_comment .)
    (               reduce using rule 37 (comment -> multi_line_comment .)
    DEC_LIT         reduce using rule 37 (comment -> multi_line_comment .)
    FLOAT_LIT       reduce using rule 37 (comment -> multi_line_comment .)
    STR_LIT         reduce using rule 37 (comment -> multi_line_comment .)
    CHAR_LIT        reduce using rule 37 (comment -> multi_line_comment .)
    -               reduce using rule 37 (comment -> multi_line_comment .)
    NEW             reduce using rule 37 (comment -> multi_line_comment .)


state 16

    (44) multi_line_comment -> MULTI_LINE_COMMENT .

    SINGLE_LINE_COMMENT reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    MULTI_LINE_COMMENT reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    IMPORT          reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    PUBLIC          reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    PRIVATE         reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    VOID            reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    STATIC          reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    BYTE            reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    SHORT           reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    CHAR            reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    INT             reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    LONG            reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    FLOAT           reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    DOUBLE          reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    BOOLEAN         reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    ID              reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    $end            reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    }               reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    IF              reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    WHILE           reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    RETURN          reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    (               reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    DEC_LIT         reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    FLOAT_LIT       reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    STR_LIT         reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    CHAR_LIT        reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    -               reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)
    NEW             reduce using rule 44 (multi_line_comment -> MULTI_LINE_COMMENT .)


state 17

    (12) package_statement -> PACKAGE qualified_identifier . ;

    ;               shift and go to state 41


state 18

    (89) qualified_identifier -> identifier .
    (90) qualified_identifier -> identifier . . qualified_identifier

    ;               reduce using rule 89 (qualified_identifier -> identifier .)
    {               reduce using rule 89 (qualified_identifier -> identifier .)
    (               reduce using rule 89 (qualified_identifier -> identifier .)
    +               reduce using rule 89 (qualified_identifier -> identifier .)
    -               reduce using rule 89 (qualified_identifier -> identifier .)
    *               reduce using rule 89 (qualified_identifier -> identifier .)
    /               reduce using rule 89 (qualified_identifier -> identifier .)
    %               reduce using rule 89 (qualified_identifier -> identifier .)
    )               reduce using rule 89 (qualified_identifier -> identifier .)
    ,               reduce using rule 89 (qualified_identifier -> identifier .)
    .               shift and go to state 42


state 19

    (81) identifier -> ID .

    .               reduce using rule 81 (identifier -> ID .)
    ;               reduce using rule 81 (identifier -> ID .)
    [               reduce using rule 81 (identifier -> ID .)
    CLASS           reduce using rule 81 (identifier -> ID .)
    PUBLIC          reduce using rule 81 (identifier -> ID .)
    PRIVATE         reduce using rule 81 (identifier -> ID .)
    VOID            reduce using rule 81 (identifier -> ID .)
    STATIC          reduce using rule 81 (identifier -> ID .)
    BYTE            reduce using rule 81 (identifier -> ID .)
    SHORT           reduce using rule 81 (identifier -> ID .)
    CHAR            reduce using rule 81 (identifier -> ID .)
    INT             reduce using rule 81 (identifier -> ID .)
    LONG            reduce using rule 81 (identifier -> ID .)
    FLOAT           reduce using rule 81 (identifier -> ID .)
    DOUBLE          reduce using rule 81 (identifier -> ID .)
    BOOLEAN         reduce using rule 81 (identifier -> ID .)
    ID              reduce using rule 81 (identifier -> ID .)
    {               reduce using rule 81 (identifier -> ID .)
    (               reduce using rule 81 (identifier -> ID .)
    +               reduce using rule 81 (identifier -> ID .)
    -               reduce using rule 81 (identifier -> ID .)
    *               reduce using rule 81 (identifier -> ID .)
    /               reduce using rule 81 (identifier -> ID .)
    %               reduce using rule 81 (identifier -> ID .)
    )               reduce using rule 81 (identifier -> ID .)
    ,               reduce using rule 81 (identifier -> ID .)
    EXTENDS         reduce using rule 81 (identifier -> ID .)
    =               reduce using rule 81 (identifier -> ID .)
    INC             reduce using rule 81 (identifier -> ID .)


state 20

    (42) class_declaration_with_comments -> package_statement_or_empty pre_class_declaration_list class_declaration . comment_list_or_empty
    (98) comment_list_or_empty -> . comment_list
    (99) comment_list_or_empty -> . empty
    (20) comment_list -> . comment
    (21) comment_list -> . comment comment_list
    (95) empty -> .
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (44) multi_line_comment -> . MULTI_LINE_COMMENT

    $end            reduce using rule 95 (empty -> .)
    SINGLE_LINE_COMMENT shift and go to state 14
    MULTI_LINE_COMMENT shift and go to state 16

    comment_list_or_empty          shift and go to state 43
    comment_list                   shift and go to state 44
    empty                          shift and go to state 45
    comment                        shift and go to state 12
    multi_line_comment             shift and go to state 15

state 21

    (26) pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .

    IMPORT          reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    PUBLIC          reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    PRIVATE         reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    VOID            reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    STATIC          reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    SINGLE_LINE_COMMENT reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    BYTE            reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    SHORT           reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    CHAR            reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    INT             reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    LONG            reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    FLOAT           reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    DOUBLE          reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    BOOLEAN         reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    MULTI_LINE_COMMENT reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)
    ID              reduce using rule 26 (pre_class_declaration_list -> pre_class_declaration_list pre_class_declaration .)


state 22

    (38) class_declaration -> class_modifier_list . CLASS identifier extends_or_empty { class_body }
    (46) class_modifier_list -> class_modifier_list . class_modifier
    (70) class_modifier -> . PUBLIC
    (71) class_modifier -> . PRIVATE
    (72) class_modifier -> . VOID
    (73) class_modifier -> . STATIC
    (74) class_modifier -> . variable_type
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (81) identifier -> . ID
    (83) array_type -> . variable_type [ ]

    CLASS           shift and go to state 46
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26
    VOID            shift and go to state 27
    STATIC          shift and go to state 28
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    ID              shift and go to state 19

    identifier                     shift and go to state 23
    class_modifier                 shift and go to state 47
    variable_type                  shift and go to state 29
    array_type                     shift and go to state 38

state 23

    (58) variable_type -> identifier .

    [               reduce using rule 58 (variable_type -> identifier .)
    CLASS           reduce using rule 58 (variable_type -> identifier .)
    PUBLIC          reduce using rule 58 (variable_type -> identifier .)
    PRIVATE         reduce using rule 58 (variable_type -> identifier .)
    VOID            reduce using rule 58 (variable_type -> identifier .)
    STATIC          reduce using rule 58 (variable_type -> identifier .)
    BYTE            reduce using rule 58 (variable_type -> identifier .)
    SHORT           reduce using rule 58 (variable_type -> identifier .)
    CHAR            reduce using rule 58 (variable_type -> identifier .)
    INT             reduce using rule 58 (variable_type -> identifier .)
    LONG            reduce using rule 58 (variable_type -> identifier .)
    FLOAT           reduce using rule 58 (variable_type -> identifier .)
    DOUBLE          reduce using rule 58 (variable_type -> identifier .)
    BOOLEAN         reduce using rule 58 (variable_type -> identifier .)
    ID              reduce using rule 58 (variable_type -> identifier .)


state 24

    (45) class_modifier_list -> class_modifier .

    CLASS           reduce using rule 45 (class_modifier_list -> class_modifier .)
    PUBLIC          reduce using rule 45 (class_modifier_list -> class_modifier .)
    PRIVATE         reduce using rule 45 (class_modifier_list -> class_modifier .)
    VOID            reduce using rule 45 (class_modifier_list -> class_modifier .)
    STATIC          reduce using rule 45 (class_modifier_list -> class_modifier .)
    BYTE            reduce using rule 45 (class_modifier_list -> class_modifier .)
    SHORT           reduce using rule 45 (class_modifier_list -> class_modifier .)
    CHAR            reduce using rule 45 (class_modifier_list -> class_modifier .)
    INT             reduce using rule 45 (class_modifier_list -> class_modifier .)
    LONG            reduce using rule 45 (class_modifier_list -> class_modifier .)
    FLOAT           reduce using rule 45 (class_modifier_list -> class_modifier .)
    DOUBLE          reduce using rule 45 (class_modifier_list -> class_modifier .)
    BOOLEAN         reduce using rule 45 (class_modifier_list -> class_modifier .)
    ID              reduce using rule 45 (class_modifier_list -> class_modifier .)


state 25

    (70) class_modifier -> PUBLIC .

    CLASS           reduce using rule 70 (class_modifier -> PUBLIC .)
    PUBLIC          reduce using rule 70 (class_modifier -> PUBLIC .)
    PRIVATE         reduce using rule 70 (class_modifier -> PUBLIC .)
    VOID            reduce using rule 70 (class_modifier -> PUBLIC .)
    STATIC          reduce using rule 70 (class_modifier -> PUBLIC .)
    BYTE            reduce using rule 70 (class_modifier -> PUBLIC .)
    SHORT           reduce using rule 70 (class_modifier -> PUBLIC .)
    CHAR            reduce using rule 70 (class_modifier -> PUBLIC .)
    INT             reduce using rule 70 (class_modifier -> PUBLIC .)
    LONG            reduce using rule 70 (class_modifier -> PUBLIC .)
    FLOAT           reduce using rule 70 (class_modifier -> PUBLIC .)
    DOUBLE          reduce using rule 70 (class_modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 70 (class_modifier -> PUBLIC .)
    ID              reduce using rule 70 (class_modifier -> PUBLIC .)


state 26

    (71) class_modifier -> PRIVATE .

    CLASS           reduce using rule 71 (class_modifier -> PRIVATE .)
    PUBLIC          reduce using rule 71 (class_modifier -> PRIVATE .)
    PRIVATE         reduce using rule 71 (class_modifier -> PRIVATE .)
    VOID            reduce using rule 71 (class_modifier -> PRIVATE .)
    STATIC          reduce using rule 71 (class_modifier -> PRIVATE .)
    BYTE            reduce using rule 71 (class_modifier -> PRIVATE .)
    SHORT           reduce using rule 71 (class_modifier -> PRIVATE .)
    CHAR            reduce using rule 71 (class_modifier -> PRIVATE .)
    INT             reduce using rule 71 (class_modifier -> PRIVATE .)
    LONG            reduce using rule 71 (class_modifier -> PRIVATE .)
    FLOAT           reduce using rule 71 (class_modifier -> PRIVATE .)
    DOUBLE          reduce using rule 71 (class_modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 71 (class_modifier -> PRIVATE .)
    ID              reduce using rule 71 (class_modifier -> PRIVATE .)


state 27

    (72) class_modifier -> VOID .

    CLASS           reduce using rule 72 (class_modifier -> VOID .)
    PUBLIC          reduce using rule 72 (class_modifier -> VOID .)
    PRIVATE         reduce using rule 72 (class_modifier -> VOID .)
    VOID            reduce using rule 72 (class_modifier -> VOID .)
    STATIC          reduce using rule 72 (class_modifier -> VOID .)
    BYTE            reduce using rule 72 (class_modifier -> VOID .)
    SHORT           reduce using rule 72 (class_modifier -> VOID .)
    CHAR            reduce using rule 72 (class_modifier -> VOID .)
    INT             reduce using rule 72 (class_modifier -> VOID .)
    LONG            reduce using rule 72 (class_modifier -> VOID .)
    FLOAT           reduce using rule 72 (class_modifier -> VOID .)
    DOUBLE          reduce using rule 72 (class_modifier -> VOID .)
    BOOLEAN         reduce using rule 72 (class_modifier -> VOID .)
    ID              reduce using rule 72 (class_modifier -> VOID .)


state 28

    (73) class_modifier -> STATIC .

    CLASS           reduce using rule 73 (class_modifier -> STATIC .)
    PUBLIC          reduce using rule 73 (class_modifier -> STATIC .)
    PRIVATE         reduce using rule 73 (class_modifier -> STATIC .)
    VOID            reduce using rule 73 (class_modifier -> STATIC .)
    STATIC          reduce using rule 73 (class_modifier -> STATIC .)
    BYTE            reduce using rule 73 (class_modifier -> STATIC .)
    SHORT           reduce using rule 73 (class_modifier -> STATIC .)
    CHAR            reduce using rule 73 (class_modifier -> STATIC .)
    INT             reduce using rule 73 (class_modifier -> STATIC .)
    LONG            reduce using rule 73 (class_modifier -> STATIC .)
    FLOAT           reduce using rule 73 (class_modifier -> STATIC .)
    DOUBLE          reduce using rule 73 (class_modifier -> STATIC .)
    BOOLEAN         reduce using rule 73 (class_modifier -> STATIC .)
    ID              reduce using rule 73 (class_modifier -> STATIC .)


state 29

    (74) class_modifier -> variable_type .
    (83) array_type -> variable_type . [ ]

    CLASS           reduce using rule 74 (class_modifier -> variable_type .)
    PUBLIC          reduce using rule 74 (class_modifier -> variable_type .)
    PRIVATE         reduce using rule 74 (class_modifier -> variable_type .)
    VOID            reduce using rule 74 (class_modifier -> variable_type .)
    STATIC          reduce using rule 74 (class_modifier -> variable_type .)
    BYTE            reduce using rule 74 (class_modifier -> variable_type .)
    SHORT           reduce using rule 74 (class_modifier -> variable_type .)
    CHAR            reduce using rule 74 (class_modifier -> variable_type .)
    INT             reduce using rule 74 (class_modifier -> variable_type .)
    LONG            reduce using rule 74 (class_modifier -> variable_type .)
    FLOAT           reduce using rule 74 (class_modifier -> variable_type .)
    DOUBLE          reduce using rule 74 (class_modifier -> variable_type .)
    BOOLEAN         reduce using rule 74 (class_modifier -> variable_type .)
    ID              reduce using rule 74 (class_modifier -> variable_type .)
    [               shift and go to state 48


state 30

    (59) variable_type -> BYTE .

    [               reduce using rule 59 (variable_type -> BYTE .)
    CLASS           reduce using rule 59 (variable_type -> BYTE .)
    PUBLIC          reduce using rule 59 (variable_type -> BYTE .)
    PRIVATE         reduce using rule 59 (variable_type -> BYTE .)
    VOID            reduce using rule 59 (variable_type -> BYTE .)
    STATIC          reduce using rule 59 (variable_type -> BYTE .)
    BYTE            reduce using rule 59 (variable_type -> BYTE .)
    SHORT           reduce using rule 59 (variable_type -> BYTE .)
    CHAR            reduce using rule 59 (variable_type -> BYTE .)
    INT             reduce using rule 59 (variable_type -> BYTE .)
    LONG            reduce using rule 59 (variable_type -> BYTE .)
    FLOAT           reduce using rule 59 (variable_type -> BYTE .)
    DOUBLE          reduce using rule 59 (variable_type -> BYTE .)
    BOOLEAN         reduce using rule 59 (variable_type -> BYTE .)
    ID              reduce using rule 59 (variable_type -> BYTE .)


state 31

    (60) variable_type -> SHORT .

    [               reduce using rule 60 (variable_type -> SHORT .)
    CLASS           reduce using rule 60 (variable_type -> SHORT .)
    PUBLIC          reduce using rule 60 (variable_type -> SHORT .)
    PRIVATE         reduce using rule 60 (variable_type -> SHORT .)
    VOID            reduce using rule 60 (variable_type -> SHORT .)
    STATIC          reduce using rule 60 (variable_type -> SHORT .)
    BYTE            reduce using rule 60 (variable_type -> SHORT .)
    SHORT           reduce using rule 60 (variable_type -> SHORT .)
    CHAR            reduce using rule 60 (variable_type -> SHORT .)
    INT             reduce using rule 60 (variable_type -> SHORT .)
    LONG            reduce using rule 60 (variable_type -> SHORT .)
    FLOAT           reduce using rule 60 (variable_type -> SHORT .)
    DOUBLE          reduce using rule 60 (variable_type -> SHORT .)
    BOOLEAN         reduce using rule 60 (variable_type -> SHORT .)
    ID              reduce using rule 60 (variable_type -> SHORT .)


state 32

    (61) variable_type -> CHAR .

    [               reduce using rule 61 (variable_type -> CHAR .)
    CLASS           reduce using rule 61 (variable_type -> CHAR .)
    PUBLIC          reduce using rule 61 (variable_type -> CHAR .)
    PRIVATE         reduce using rule 61 (variable_type -> CHAR .)
    VOID            reduce using rule 61 (variable_type -> CHAR .)
    STATIC          reduce using rule 61 (variable_type -> CHAR .)
    BYTE            reduce using rule 61 (variable_type -> CHAR .)
    SHORT           reduce using rule 61 (variable_type -> CHAR .)
    CHAR            reduce using rule 61 (variable_type -> CHAR .)
    INT             reduce using rule 61 (variable_type -> CHAR .)
    LONG            reduce using rule 61 (variable_type -> CHAR .)
    FLOAT           reduce using rule 61 (variable_type -> CHAR .)
    DOUBLE          reduce using rule 61 (variable_type -> CHAR .)
    BOOLEAN         reduce using rule 61 (variable_type -> CHAR .)
    ID              reduce using rule 61 (variable_type -> CHAR .)


state 33

    (62) variable_type -> INT .

    [               reduce using rule 62 (variable_type -> INT .)
    CLASS           reduce using rule 62 (variable_type -> INT .)
    PUBLIC          reduce using rule 62 (variable_type -> INT .)
    PRIVATE         reduce using rule 62 (variable_type -> INT .)
    VOID            reduce using rule 62 (variable_type -> INT .)
    STATIC          reduce using rule 62 (variable_type -> INT .)
    BYTE            reduce using rule 62 (variable_type -> INT .)
    SHORT           reduce using rule 62 (variable_type -> INT .)
    CHAR            reduce using rule 62 (variable_type -> INT .)
    INT             reduce using rule 62 (variable_type -> INT .)
    LONG            reduce using rule 62 (variable_type -> INT .)
    FLOAT           reduce using rule 62 (variable_type -> INT .)
    DOUBLE          reduce using rule 62 (variable_type -> INT .)
    BOOLEAN         reduce using rule 62 (variable_type -> INT .)
    ID              reduce using rule 62 (variable_type -> INT .)


state 34

    (63) variable_type -> LONG .

    [               reduce using rule 63 (variable_type -> LONG .)
    CLASS           reduce using rule 63 (variable_type -> LONG .)
    PUBLIC          reduce using rule 63 (variable_type -> LONG .)
    PRIVATE         reduce using rule 63 (variable_type -> LONG .)
    VOID            reduce using rule 63 (variable_type -> LONG .)
    STATIC          reduce using rule 63 (variable_type -> LONG .)
    BYTE            reduce using rule 63 (variable_type -> LONG .)
    SHORT           reduce using rule 63 (variable_type -> LONG .)
    CHAR            reduce using rule 63 (variable_type -> LONG .)
    INT             reduce using rule 63 (variable_type -> LONG .)
    LONG            reduce using rule 63 (variable_type -> LONG .)
    FLOAT           reduce using rule 63 (variable_type -> LONG .)
    DOUBLE          reduce using rule 63 (variable_type -> LONG .)
    BOOLEAN         reduce using rule 63 (variable_type -> LONG .)
    ID              reduce using rule 63 (variable_type -> LONG .)


state 35

    (64) variable_type -> FLOAT .

    [               reduce using rule 64 (variable_type -> FLOAT .)
    CLASS           reduce using rule 64 (variable_type -> FLOAT .)
    PUBLIC          reduce using rule 64 (variable_type -> FLOAT .)
    PRIVATE         reduce using rule 64 (variable_type -> FLOAT .)
    VOID            reduce using rule 64 (variable_type -> FLOAT .)
    STATIC          reduce using rule 64 (variable_type -> FLOAT .)
    BYTE            reduce using rule 64 (variable_type -> FLOAT .)
    SHORT           reduce using rule 64 (variable_type -> FLOAT .)
    CHAR            reduce using rule 64 (variable_type -> FLOAT .)
    INT             reduce using rule 64 (variable_type -> FLOAT .)
    LONG            reduce using rule 64 (variable_type -> FLOAT .)
    FLOAT           reduce using rule 64 (variable_type -> FLOAT .)
    DOUBLE          reduce using rule 64 (variable_type -> FLOAT .)
    BOOLEAN         reduce using rule 64 (variable_type -> FLOAT .)
    ID              reduce using rule 64 (variable_type -> FLOAT .)


state 36

    (65) variable_type -> DOUBLE .

    [               reduce using rule 65 (variable_type -> DOUBLE .)
    CLASS           reduce using rule 65 (variable_type -> DOUBLE .)
    PUBLIC          reduce using rule 65 (variable_type -> DOUBLE .)
    PRIVATE         reduce using rule 65 (variable_type -> DOUBLE .)
    VOID            reduce using rule 65 (variable_type -> DOUBLE .)
    STATIC          reduce using rule 65 (variable_type -> DOUBLE .)
    BYTE            reduce using rule 65 (variable_type -> DOUBLE .)
    SHORT           reduce using rule 65 (variable_type -> DOUBLE .)
    CHAR            reduce using rule 65 (variable_type -> DOUBLE .)
    INT             reduce using rule 65 (variable_type -> DOUBLE .)
    LONG            reduce using rule 65 (variable_type -> DOUBLE .)
    FLOAT           reduce using rule 65 (variable_type -> DOUBLE .)
    DOUBLE          reduce using rule 65 (variable_type -> DOUBLE .)
    BOOLEAN         reduce using rule 65 (variable_type -> DOUBLE .)
    ID              reduce using rule 65 (variable_type -> DOUBLE .)


state 37

    (66) variable_type -> BOOLEAN .

    [               reduce using rule 66 (variable_type -> BOOLEAN .)
    CLASS           reduce using rule 66 (variable_type -> BOOLEAN .)
    PUBLIC          reduce using rule 66 (variable_type -> BOOLEAN .)
    PRIVATE         reduce using rule 66 (variable_type -> BOOLEAN .)
    VOID            reduce using rule 66 (variable_type -> BOOLEAN .)
    STATIC          reduce using rule 66 (variable_type -> BOOLEAN .)
    BYTE            reduce using rule 66 (variable_type -> BOOLEAN .)
    SHORT           reduce using rule 66 (variable_type -> BOOLEAN .)
    CHAR            reduce using rule 66 (variable_type -> BOOLEAN .)
    INT             reduce using rule 66 (variable_type -> BOOLEAN .)
    LONG            reduce using rule 66 (variable_type -> BOOLEAN .)
    FLOAT           reduce using rule 66 (variable_type -> BOOLEAN .)
    DOUBLE          reduce using rule 66 (variable_type -> BOOLEAN .)
    BOOLEAN         reduce using rule 66 (variable_type -> BOOLEAN .)
    ID              reduce using rule 66 (variable_type -> BOOLEAN .)


state 38

    (67) variable_type -> array_type .

    [               reduce using rule 67 (variable_type -> array_type .)
    CLASS           reduce using rule 67 (variable_type -> array_type .)
    PUBLIC          reduce using rule 67 (variable_type -> array_type .)
    PRIVATE         reduce using rule 67 (variable_type -> array_type .)
    VOID            reduce using rule 67 (variable_type -> array_type .)
    STATIC          reduce using rule 67 (variable_type -> array_type .)
    BYTE            reduce using rule 67 (variable_type -> array_type .)
    SHORT           reduce using rule 67 (variable_type -> array_type .)
    CHAR            reduce using rule 67 (variable_type -> array_type .)
    INT             reduce using rule 67 (variable_type -> array_type .)
    LONG            reduce using rule 67 (variable_type -> array_type .)
    FLOAT           reduce using rule 67 (variable_type -> array_type .)
    DOUBLE          reduce using rule 67 (variable_type -> array_type .)
    BOOLEAN         reduce using rule 67 (variable_type -> array_type .)
    ID              reduce using rule 67 (variable_type -> array_type .)


state 39

    (21) comment_list -> comment comment_list .

    IMPORT          reduce using rule 21 (comment_list -> comment comment_list .)
    PUBLIC          reduce using rule 21 (comment_list -> comment comment_list .)
    PRIVATE         reduce using rule 21 (comment_list -> comment comment_list .)
    VOID            reduce using rule 21 (comment_list -> comment comment_list .)
    STATIC          reduce using rule 21 (comment_list -> comment comment_list .)
    SINGLE_LINE_COMMENT reduce using rule 21 (comment_list -> comment comment_list .)
    BYTE            reduce using rule 21 (comment_list -> comment comment_list .)
    SHORT           reduce using rule 21 (comment_list -> comment comment_list .)
    CHAR            reduce using rule 21 (comment_list -> comment comment_list .)
    INT             reduce using rule 21 (comment_list -> comment comment_list .)
    LONG            reduce using rule 21 (comment_list -> comment comment_list .)
    FLOAT           reduce using rule 21 (comment_list -> comment comment_list .)
    DOUBLE          reduce using rule 21 (comment_list -> comment comment_list .)
    BOOLEAN         reduce using rule 21 (comment_list -> comment comment_list .)
    MULTI_LINE_COMMENT reduce using rule 21 (comment_list -> comment comment_list .)
    ID              reduce using rule 21 (comment_list -> comment comment_list .)
    $end            reduce using rule 21 (comment_list -> comment comment_list .)


state 40

    (55) import_statement -> IMPORT qualified_identifier . ;

    ;               shift and go to state 49


state 41

    (12) package_statement -> PACKAGE qualified_identifier ; .

    IMPORT          reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    SINGLE_LINE_COMMENT reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    MULTI_LINE_COMMENT reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    PUBLIC          reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    PRIVATE         reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    VOID            reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    STATIC          reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    BYTE            reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    SHORT           reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    CHAR            reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    INT             reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    LONG            reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    FLOAT           reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    DOUBLE          reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    BOOLEAN         reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)
    ID              reduce using rule 12 (package_statement -> PACKAGE qualified_identifier ; .)


state 42

    (90) qualified_identifier -> identifier . . qualified_identifier
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (81) identifier -> . ID

    ID              shift and go to state 19

    identifier                     shift and go to state 18
    qualified_identifier           shift and go to state 50

state 43

    (42) class_declaration_with_comments -> package_statement_or_empty pre_class_declaration_list class_declaration comment_list_or_empty .

    $end            reduce using rule 42 (class_declaration_with_comments -> package_statement_or_empty pre_class_declaration_list class_declaration comment_list_or_empty .)


state 44

    (98) comment_list_or_empty -> comment_list .

    $end            reduce using rule 98 (comment_list_or_empty -> comment_list .)


state 45

    (99) comment_list_or_empty -> empty .

    $end            reduce using rule 99 (comment_list_or_empty -> empty .)


state 46

    (38) class_declaration -> class_modifier_list CLASS . identifier extends_or_empty { class_body }
    (81) identifier -> . ID

    ID              shift and go to state 19

    identifier                     shift and go to state 51

state 47

    (46) class_modifier_list -> class_modifier_list class_modifier .

    CLASS           reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    PUBLIC          reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    PRIVATE         reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    VOID            reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    STATIC          reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    BYTE            reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    SHORT           reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    CHAR            reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    INT             reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    LONG            reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    FLOAT           reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    DOUBLE          reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    BOOLEAN         reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)
    ID              reduce using rule 46 (class_modifier_list -> class_modifier_list class_modifier .)


state 48

    (83) array_type -> variable_type [ . ]

    ]               shift and go to state 52


state 49

    (55) import_statement -> IMPORT qualified_identifier ; .

    IMPORT          reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    PUBLIC          reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    PRIVATE         reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    VOID            reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    STATIC          reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    SINGLE_LINE_COMMENT reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    BYTE            reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    SHORT           reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    CHAR            reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    INT             reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    LONG            reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    FLOAT           reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    DOUBLE          reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    BOOLEAN         reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    MULTI_LINE_COMMENT reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)
    ID              reduce using rule 55 (import_statement -> IMPORT qualified_identifier ; .)


state 50

    (90) qualified_identifier -> identifier . qualified_identifier .

    ;               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)
    {               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)
    (               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)
    +               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)
    -               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)
    *               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)
    /               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)
    %               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)
    )               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)
    ,               reduce using rule 90 (qualified_identifier -> identifier . qualified_identifier .)


state 51

    (38) class_declaration -> class_modifier_list CLASS identifier . extends_or_empty { class_body }
    (79) extends_or_empty -> . EXTENDS qualified_identifier
    (80) extends_or_empty -> . empty
    (95) empty -> .

    EXTENDS         shift and go to state 54
    {               reduce using rule 95 (empty -> .)

    extends_or_empty               shift and go to state 53
    empty                          shift and go to state 55

state 52

    (83) array_type -> variable_type [ ] .

    [               reduce using rule 83 (array_type -> variable_type [ ] .)
    CLASS           reduce using rule 83 (array_type -> variable_type [ ] .)
    PUBLIC          reduce using rule 83 (array_type -> variable_type [ ] .)
    PRIVATE         reduce using rule 83 (array_type -> variable_type [ ] .)
    VOID            reduce using rule 83 (array_type -> variable_type [ ] .)
    STATIC          reduce using rule 83 (array_type -> variable_type [ ] .)
    BYTE            reduce using rule 83 (array_type -> variable_type [ ] .)
    SHORT           reduce using rule 83 (array_type -> variable_type [ ] .)
    CHAR            reduce using rule 83 (array_type -> variable_type [ ] .)
    INT             reduce using rule 83 (array_type -> variable_type [ ] .)
    LONG            reduce using rule 83 (array_type -> variable_type [ ] .)
    FLOAT           reduce using rule 83 (array_type -> variable_type [ ] .)
    DOUBLE          reduce using rule 83 (array_type -> variable_type [ ] .)
    BOOLEAN         reduce using rule 83 (array_type -> variable_type [ ] .)
    ID              reduce using rule 83 (array_type -> variable_type [ ] .)


state 53

    (38) class_declaration -> class_modifier_list CLASS identifier extends_or_empty . { class_body }

    {               shift and go to state 56


state 54

    (79) extends_or_empty -> EXTENDS . qualified_identifier
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (81) identifier -> . ID

    ID              shift and go to state 19

    qualified_identifier           shift and go to state 57
    identifier                     shift and go to state 18

state 55

    (80) extends_or_empty -> empty .

    {               reduce using rule 80 (extends_or_empty -> empty .)


state 56

    (38) class_declaration -> class_modifier_list CLASS identifier extends_or_empty { . class_body }
    (85) class_body -> . method_list_or_empty
    (92) method_list_or_empty -> . method_list
    (93) method_list_or_empty -> . empty
    (96) method_list -> . method_or_comment
    (97) method_list -> . method_list method_or_comment
    (95) empty -> .
    (100) method_or_comment -> . field
    (101) method_or_comment -> . method
    (102) method_or_comment -> . comment
    (103) field -> . class_modifier_list identifier = expression ;
    (104) method -> . class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty }
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (45) class_modifier_list -> . class_modifier
    (46) class_modifier_list -> . class_modifier_list class_modifier
    (44) multi_line_comment -> . MULTI_LINE_COMMENT
    (70) class_modifier -> . PUBLIC
    (71) class_modifier -> . PRIVATE
    (72) class_modifier -> . VOID
    (73) class_modifier -> . STATIC
    (74) class_modifier -> . variable_type
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (81) identifier -> . ID
    (83) array_type -> . variable_type [ ]

    }               reduce using rule 95 (empty -> .)
    SINGLE_LINE_COMMENT shift and go to state 14
    MULTI_LINE_COMMENT shift and go to state 16
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26
    VOID            shift and go to state 27
    STATIC          shift and go to state 28
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    ID              shift and go to state 19

    class_modifier_list            shift and go to state 58
    identifier                     shift and go to state 23
    class_body                     shift and go to state 59
    method_list_or_empty           shift and go to state 60
    method_list                    shift and go to state 61
    empty                          shift and go to state 62
    method_or_comment              shift and go to state 63
    field                          shift and go to state 64
    method                         shift and go to state 65
    comment                        shift and go to state 66
    multi_line_comment             shift and go to state 15
    class_modifier                 shift and go to state 24
    variable_type                  shift and go to state 29
    array_type                     shift and go to state 38

state 57

    (79) extends_or_empty -> EXTENDS qualified_identifier .

    {               reduce using rule 79 (extends_or_empty -> EXTENDS qualified_identifier .)


state 58

    (103) field -> class_modifier_list . identifier = expression ;
    (104) method -> class_modifier_list . identifier ( parameter_list_or_empty ) { statement_list_or_empty }
    (46) class_modifier_list -> class_modifier_list . class_modifier
    (81) identifier -> . ID
    (70) class_modifier -> . PUBLIC
    (71) class_modifier -> . PRIVATE
    (72) class_modifier -> . VOID
    (73) class_modifier -> . STATIC
    (74) class_modifier -> . variable_type
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (83) array_type -> . variable_type [ ]

    ID              shift and go to state 19
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26
    VOID            shift and go to state 27
    STATIC          shift and go to state 28
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37

    identifier                     shift and go to state 67
    class_modifier                 shift and go to state 47
    variable_type                  shift and go to state 29
    array_type                     shift and go to state 38

state 59

    (38) class_declaration -> class_modifier_list CLASS identifier extends_or_empty { class_body . }

    }               shift and go to state 68


state 60

    (85) class_body -> method_list_or_empty .

    }               reduce using rule 85 (class_body -> method_list_or_empty .)


state 61

    (92) method_list_or_empty -> method_list .
    (97) method_list -> method_list . method_or_comment
    (100) method_or_comment -> . field
    (101) method_or_comment -> . method
    (102) method_or_comment -> . comment
    (103) field -> . class_modifier_list identifier = expression ;
    (104) method -> . class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty }
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (45) class_modifier_list -> . class_modifier
    (46) class_modifier_list -> . class_modifier_list class_modifier
    (44) multi_line_comment -> . MULTI_LINE_COMMENT
    (70) class_modifier -> . PUBLIC
    (71) class_modifier -> . PRIVATE
    (72) class_modifier -> . VOID
    (73) class_modifier -> . STATIC
    (74) class_modifier -> . variable_type
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (81) identifier -> . ID
    (83) array_type -> . variable_type [ ]

    }               reduce using rule 92 (method_list_or_empty -> method_list .)
    SINGLE_LINE_COMMENT shift and go to state 14
    MULTI_LINE_COMMENT shift and go to state 16
    PUBLIC          shift and go to state 25
    PRIVATE         shift and go to state 26
    VOID            shift and go to state 27
    STATIC          shift and go to state 28
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    ID              shift and go to state 19

    method_or_comment              shift and go to state 69
    field                          shift and go to state 64
    method                         shift and go to state 65
    comment                        shift and go to state 66
    class_modifier_list            shift and go to state 58
    identifier                     shift and go to state 23
    multi_line_comment             shift and go to state 15
    class_modifier                 shift and go to state 24
    variable_type                  shift and go to state 29
    array_type                     shift and go to state 38

state 62

    (93) method_list_or_empty -> empty .

    }               reduce using rule 93 (method_list_or_empty -> empty .)


state 63

    (96) method_list -> method_or_comment .

    SINGLE_LINE_COMMENT reduce using rule 96 (method_list -> method_or_comment .)
    MULTI_LINE_COMMENT reduce using rule 96 (method_list -> method_or_comment .)
    PUBLIC          reduce using rule 96 (method_list -> method_or_comment .)
    PRIVATE         reduce using rule 96 (method_list -> method_or_comment .)
    VOID            reduce using rule 96 (method_list -> method_or_comment .)
    STATIC          reduce using rule 96 (method_list -> method_or_comment .)
    BYTE            reduce using rule 96 (method_list -> method_or_comment .)
    SHORT           reduce using rule 96 (method_list -> method_or_comment .)
    CHAR            reduce using rule 96 (method_list -> method_or_comment .)
    INT             reduce using rule 96 (method_list -> method_or_comment .)
    LONG            reduce using rule 96 (method_list -> method_or_comment .)
    FLOAT           reduce using rule 96 (method_list -> method_or_comment .)
    DOUBLE          reduce using rule 96 (method_list -> method_or_comment .)
    BOOLEAN         reduce using rule 96 (method_list -> method_or_comment .)
    ID              reduce using rule 96 (method_list -> method_or_comment .)
    }               reduce using rule 96 (method_list -> method_or_comment .)


state 64

    (100) method_or_comment -> field .

    SINGLE_LINE_COMMENT reduce using rule 100 (method_or_comment -> field .)
    MULTI_LINE_COMMENT reduce using rule 100 (method_or_comment -> field .)
    PUBLIC          reduce using rule 100 (method_or_comment -> field .)
    PRIVATE         reduce using rule 100 (method_or_comment -> field .)
    VOID            reduce using rule 100 (method_or_comment -> field .)
    STATIC          reduce using rule 100 (method_or_comment -> field .)
    BYTE            reduce using rule 100 (method_or_comment -> field .)
    SHORT           reduce using rule 100 (method_or_comment -> field .)
    CHAR            reduce using rule 100 (method_or_comment -> field .)
    INT             reduce using rule 100 (method_or_comment -> field .)
    LONG            reduce using rule 100 (method_or_comment -> field .)
    FLOAT           reduce using rule 100 (method_or_comment -> field .)
    DOUBLE          reduce using rule 100 (method_or_comment -> field .)
    BOOLEAN         reduce using rule 100 (method_or_comment -> field .)
    ID              reduce using rule 100 (method_or_comment -> field .)
    }               reduce using rule 100 (method_or_comment -> field .)


state 65

    (101) method_or_comment -> method .

    SINGLE_LINE_COMMENT reduce using rule 101 (method_or_comment -> method .)
    MULTI_LINE_COMMENT reduce using rule 101 (method_or_comment -> method .)
    PUBLIC          reduce using rule 101 (method_or_comment -> method .)
    PRIVATE         reduce using rule 101 (method_or_comment -> method .)
    VOID            reduce using rule 101 (method_or_comment -> method .)
    STATIC          reduce using rule 101 (method_or_comment -> method .)
    BYTE            reduce using rule 101 (method_or_comment -> method .)
    SHORT           reduce using rule 101 (method_or_comment -> method .)
    CHAR            reduce using rule 101 (method_or_comment -> method .)
    INT             reduce using rule 101 (method_or_comment -> method .)
    LONG            reduce using rule 101 (method_or_comment -> method .)
    FLOAT           reduce using rule 101 (method_or_comment -> method .)
    DOUBLE          reduce using rule 101 (method_or_comment -> method .)
    BOOLEAN         reduce using rule 101 (method_or_comment -> method .)
    ID              reduce using rule 101 (method_or_comment -> method .)
    }               reduce using rule 101 (method_or_comment -> method .)


state 66

    (102) method_or_comment -> comment .

    SINGLE_LINE_COMMENT reduce using rule 102 (method_or_comment -> comment .)
    MULTI_LINE_COMMENT reduce using rule 102 (method_or_comment -> comment .)
    PUBLIC          reduce using rule 102 (method_or_comment -> comment .)
    PRIVATE         reduce using rule 102 (method_or_comment -> comment .)
    VOID            reduce using rule 102 (method_or_comment -> comment .)
    STATIC          reduce using rule 102 (method_or_comment -> comment .)
    BYTE            reduce using rule 102 (method_or_comment -> comment .)
    SHORT           reduce using rule 102 (method_or_comment -> comment .)
    CHAR            reduce using rule 102 (method_or_comment -> comment .)
    INT             reduce using rule 102 (method_or_comment -> comment .)
    LONG            reduce using rule 102 (method_or_comment -> comment .)
    FLOAT           reduce using rule 102 (method_or_comment -> comment .)
    DOUBLE          reduce using rule 102 (method_or_comment -> comment .)
    BOOLEAN         reduce using rule 102 (method_or_comment -> comment .)
    ID              reduce using rule 102 (method_or_comment -> comment .)
    }               reduce using rule 102 (method_or_comment -> comment .)


state 67

    (103) field -> class_modifier_list identifier . = expression ;
    (104) method -> class_modifier_list identifier . ( parameter_list_or_empty ) { statement_list_or_empty }
    (58) variable_type -> identifier .

    =               shift and go to state 70
    (               shift and go to state 71
    [               reduce using rule 58 (variable_type -> identifier .)
    ID              reduce using rule 58 (variable_type -> identifier .)
    PUBLIC          reduce using rule 58 (variable_type -> identifier .)
    PRIVATE         reduce using rule 58 (variable_type -> identifier .)
    VOID            reduce using rule 58 (variable_type -> identifier .)
    STATIC          reduce using rule 58 (variable_type -> identifier .)
    BYTE            reduce using rule 58 (variable_type -> identifier .)
    SHORT           reduce using rule 58 (variable_type -> identifier .)
    CHAR            reduce using rule 58 (variable_type -> identifier .)
    INT             reduce using rule 58 (variable_type -> identifier .)
    LONG            reduce using rule 58 (variable_type -> identifier .)
    FLOAT           reduce using rule 58 (variable_type -> identifier .)
    DOUBLE          reduce using rule 58 (variable_type -> identifier .)
    BOOLEAN         reduce using rule 58 (variable_type -> identifier .)


state 68

    (38) class_declaration -> class_modifier_list CLASS identifier extends_or_empty { class_body } .

    SINGLE_LINE_COMMENT reduce using rule 38 (class_declaration -> class_modifier_list CLASS identifier extends_or_empty { class_body } .)
    MULTI_LINE_COMMENT reduce using rule 38 (class_declaration -> class_modifier_list CLASS identifier extends_or_empty { class_body } .)
    $end            reduce using rule 38 (class_declaration -> class_modifier_list CLASS identifier extends_or_empty { class_body } .)


state 69

    (97) method_list -> method_list method_or_comment .

    SINGLE_LINE_COMMENT reduce using rule 97 (method_list -> method_list method_or_comment .)
    MULTI_LINE_COMMENT reduce using rule 97 (method_list -> method_list method_or_comment .)
    PUBLIC          reduce using rule 97 (method_list -> method_list method_or_comment .)
    PRIVATE         reduce using rule 97 (method_list -> method_list method_or_comment .)
    VOID            reduce using rule 97 (method_list -> method_list method_or_comment .)
    STATIC          reduce using rule 97 (method_list -> method_list method_or_comment .)
    BYTE            reduce using rule 97 (method_list -> method_list method_or_comment .)
    SHORT           reduce using rule 97 (method_list -> method_list method_or_comment .)
    CHAR            reduce using rule 97 (method_list -> method_list method_or_comment .)
    INT             reduce using rule 97 (method_list -> method_list method_or_comment .)
    LONG            reduce using rule 97 (method_list -> method_list method_or_comment .)
    FLOAT           reduce using rule 97 (method_list -> method_list method_or_comment .)
    DOUBLE          reduce using rule 97 (method_list -> method_list method_or_comment .)
    BOOLEAN         reduce using rule 97 (method_list -> method_list method_or_comment .)
    ID              reduce using rule 97 (method_list -> method_list method_or_comment .)
    }               reduce using rule 97 (method_list -> method_list method_or_comment .)


state 70

    (103) field -> class_modifier_list identifier = . expression ;
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    identifier                     shift and go to state 18
    expression                     shift and go to state 72
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83

state 71

    (104) method -> class_modifier_list identifier ( . parameter_list_or_empty ) { statement_list_or_empty }
    (105) parameter_list_or_empty -> . parameter_list
    (106) parameter_list_or_empty -> . empty
    (107) parameter_list -> . parameter_with_type
    (108) parameter_list -> . parameter_with_type , parameter_list
    (95) empty -> .
    (109) parameter_with_type -> . variable_type identifier
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (81) identifier -> . ID
    (83) array_type -> . variable_type [ ]

    )               reduce using rule 95 (empty -> .)
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    ID              shift and go to state 19

    identifier                     shift and go to state 23
    parameter_list_or_empty        shift and go to state 85
    parameter_list                 shift and go to state 86
    empty                          shift and go to state 87
    parameter_with_type            shift and go to state 88
    variable_type                  shift and go to state 89
    array_type                     shift and go to state 38

state 72

    (103) field -> class_modifier_list identifier = expression . ;
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    ;               shift and go to state 90
    +               shift and go to state 91
    -               shift and go to state 92
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 73

    (75) unary_minus -> - . DEC_LIT
    (76) unary_minus -> - . FLOAT_LIT

    DEC_LIT         shift and go to state 96
    FLOAT_LIT       shift and go to state 97


state 74

    (18) expression -> ( . expression )
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    expression                     shift and go to state 98
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 75

    (19) expression -> factor .

    ;               reduce using rule 19 (expression -> factor .)
    +               reduce using rule 19 (expression -> factor .)
    -               reduce using rule 19 (expression -> factor .)
    *               reduce using rule 19 (expression -> factor .)
    /               reduce using rule 19 (expression -> factor .)
    %               reduce using rule 19 (expression -> factor .)
    )               reduce using rule 19 (expression -> factor .)
    ,               reduce using rule 19 (expression -> factor .)


state 76

    (47) factor -> DEC_LIT .

    ;               reduce using rule 47 (factor -> DEC_LIT .)
    +               reduce using rule 47 (factor -> DEC_LIT .)
    -               reduce using rule 47 (factor -> DEC_LIT .)
    *               reduce using rule 47 (factor -> DEC_LIT .)
    /               reduce using rule 47 (factor -> DEC_LIT .)
    %               reduce using rule 47 (factor -> DEC_LIT .)
    )               reduce using rule 47 (factor -> DEC_LIT .)
    ,               reduce using rule 47 (factor -> DEC_LIT .)


state 77

    (48) factor -> FLOAT_LIT .

    ;               reduce using rule 48 (factor -> FLOAT_LIT .)
    +               reduce using rule 48 (factor -> FLOAT_LIT .)
    -               reduce using rule 48 (factor -> FLOAT_LIT .)
    *               reduce using rule 48 (factor -> FLOAT_LIT .)
    /               reduce using rule 48 (factor -> FLOAT_LIT .)
    %               reduce using rule 48 (factor -> FLOAT_LIT .)
    )               reduce using rule 48 (factor -> FLOAT_LIT .)
    ,               reduce using rule 48 (factor -> FLOAT_LIT .)


state 78

    (49) factor -> STR_LIT .

    ;               reduce using rule 49 (factor -> STR_LIT .)
    +               reduce using rule 49 (factor -> STR_LIT .)
    -               reduce using rule 49 (factor -> STR_LIT .)
    *               reduce using rule 49 (factor -> STR_LIT .)
    /               reduce using rule 49 (factor -> STR_LIT .)
    %               reduce using rule 49 (factor -> STR_LIT .)
    )               reduce using rule 49 (factor -> STR_LIT .)
    ,               reduce using rule 49 (factor -> STR_LIT .)


state 79

    (50) factor -> CHAR_LIT .

    ;               reduce using rule 50 (factor -> CHAR_LIT .)
    +               reduce using rule 50 (factor -> CHAR_LIT .)
    -               reduce using rule 50 (factor -> CHAR_LIT .)
    *               reduce using rule 50 (factor -> CHAR_LIT .)
    /               reduce using rule 50 (factor -> CHAR_LIT .)
    %               reduce using rule 50 (factor -> CHAR_LIT .)
    )               reduce using rule 50 (factor -> CHAR_LIT .)
    ,               reduce using rule 50 (factor -> CHAR_LIT .)


state 80

    (51) factor -> unary_minus .

    ;               reduce using rule 51 (factor -> unary_minus .)
    +               reduce using rule 51 (factor -> unary_minus .)
    -               reduce using rule 51 (factor -> unary_minus .)
    *               reduce using rule 51 (factor -> unary_minus .)
    /               reduce using rule 51 (factor -> unary_minus .)
    %               reduce using rule 51 (factor -> unary_minus .)
    )               reduce using rule 51 (factor -> unary_minus .)
    ,               reduce using rule 51 (factor -> unary_minus .)


state 81

    (52) factor -> qualified_identifier .
    (82) method_call -> qualified_identifier . ( argument_list )

    ;               reduce using rule 52 (factor -> qualified_identifier .)
    +               reduce using rule 52 (factor -> qualified_identifier .)
    -               reduce using rule 52 (factor -> qualified_identifier .)
    *               reduce using rule 52 (factor -> qualified_identifier .)
    /               reduce using rule 52 (factor -> qualified_identifier .)
    %               reduce using rule 52 (factor -> qualified_identifier .)
    )               reduce using rule 52 (factor -> qualified_identifier .)
    ,               reduce using rule 52 (factor -> qualified_identifier .)
    (               shift and go to state 99


state 82

    (53) factor -> method_call .

    ;               reduce using rule 53 (factor -> method_call .)
    +               reduce using rule 53 (factor -> method_call .)
    -               reduce using rule 53 (factor -> method_call .)
    *               reduce using rule 53 (factor -> method_call .)
    /               reduce using rule 53 (factor -> method_call .)
    %               reduce using rule 53 (factor -> method_call .)
    )               reduce using rule 53 (factor -> method_call .)
    ,               reduce using rule 53 (factor -> method_call .)


state 83

    (54) factor -> new_statement .

    ;               reduce using rule 54 (factor -> new_statement .)
    +               reduce using rule 54 (factor -> new_statement .)
    -               reduce using rule 54 (factor -> new_statement .)
    *               reduce using rule 54 (factor -> new_statement .)
    /               reduce using rule 54 (factor -> new_statement .)
    %               reduce using rule 54 (factor -> new_statement .)
    )               reduce using rule 54 (factor -> new_statement .)
    ,               reduce using rule 54 (factor -> new_statement .)


state 84

    (94) new_statement -> NEW . qualified_identifier ( argument_list )
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (81) identifier -> . ID

    ID              shift and go to state 19

    qualified_identifier           shift and go to state 100
    identifier                     shift and go to state 18

state 85

    (104) method -> class_modifier_list identifier ( parameter_list_or_empty . ) { statement_list_or_empty }

    )               shift and go to state 101


state 86

    (105) parameter_list_or_empty -> parameter_list .

    )               reduce using rule 105 (parameter_list_or_empty -> parameter_list .)


state 87

    (106) parameter_list_or_empty -> empty .

    )               reduce using rule 106 (parameter_list_or_empty -> empty .)


state 88

    (107) parameter_list -> parameter_with_type .
    (108) parameter_list -> parameter_with_type . , parameter_list

    )               reduce using rule 107 (parameter_list -> parameter_with_type .)
    ,               shift and go to state 102


state 89

    (109) parameter_with_type -> variable_type . identifier
    (83) array_type -> variable_type . [ ]
    (81) identifier -> . ID

    [               shift and go to state 48
    ID              shift and go to state 19

    identifier                     shift and go to state 103

state 90

    (103) field -> class_modifier_list identifier = expression ; .

    SINGLE_LINE_COMMENT reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    MULTI_LINE_COMMENT reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    PUBLIC          reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    PRIVATE         reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    VOID            reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    STATIC          reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    BYTE            reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    SHORT           reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    CHAR            reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    INT             reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    LONG            reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    FLOAT           reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    DOUBLE          reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    BOOLEAN         reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    ID              reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)
    }               reduce using rule 103 (field -> class_modifier_list identifier = expression ; .)


state 91

    (13) expression -> expression + . expression
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    expression                     shift and go to state 104
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 92

    (14) expression -> expression - . expression
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    expression                     shift and go to state 105
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 93

    (15) expression -> expression * . expression
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    expression                     shift and go to state 106
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 94

    (16) expression -> expression / . expression
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    expression                     shift and go to state 107
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 95

    (17) expression -> expression % . expression
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    expression                     shift and go to state 108
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 96

    (75) unary_minus -> - DEC_LIT .

    ;               reduce using rule 75 (unary_minus -> - DEC_LIT .)
    +               reduce using rule 75 (unary_minus -> - DEC_LIT .)
    -               reduce using rule 75 (unary_minus -> - DEC_LIT .)
    *               reduce using rule 75 (unary_minus -> - DEC_LIT .)
    /               reduce using rule 75 (unary_minus -> - DEC_LIT .)
    %               reduce using rule 75 (unary_minus -> - DEC_LIT .)
    )               reduce using rule 75 (unary_minus -> - DEC_LIT .)
    ,               reduce using rule 75 (unary_minus -> - DEC_LIT .)


state 97

    (76) unary_minus -> - FLOAT_LIT .

    ;               reduce using rule 76 (unary_minus -> - FLOAT_LIT .)
    +               reduce using rule 76 (unary_minus -> - FLOAT_LIT .)
    -               reduce using rule 76 (unary_minus -> - FLOAT_LIT .)
    *               reduce using rule 76 (unary_minus -> - FLOAT_LIT .)
    /               reduce using rule 76 (unary_minus -> - FLOAT_LIT .)
    %               reduce using rule 76 (unary_minus -> - FLOAT_LIT .)
    )               reduce using rule 76 (unary_minus -> - FLOAT_LIT .)
    ,               reduce using rule 76 (unary_minus -> - FLOAT_LIT .)


state 98

    (18) expression -> ( expression . )
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    )               shift and go to state 109
    +               shift and go to state 91
    -               shift and go to state 92
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 99

    (82) method_call -> qualified_identifier ( . argument_list )
    (86) argument_list -> . expression
    (87) argument_list -> . expression , argument_list
    (88) argument_list -> . empty
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (95) empty -> .
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    )               reduce using rule 95 (empty -> .)
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    qualified_identifier           shift and go to state 81
    argument_list                  shift and go to state 110
    expression                     shift and go to state 111
    empty                          shift and go to state 112
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 100

    (94) new_statement -> NEW qualified_identifier . ( argument_list )

    (               shift and go to state 113


state 101

    (104) method -> class_modifier_list identifier ( parameter_list_or_empty ) . { statement_list_or_empty }

    {               shift and go to state 114


state 102

    (108) parameter_list -> parameter_with_type , . parameter_list
    (107) parameter_list -> . parameter_with_type
    (108) parameter_list -> . parameter_with_type , parameter_list
    (109) parameter_with_type -> . variable_type identifier
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (81) identifier -> . ID
    (83) array_type -> . variable_type [ ]

    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    ID              shift and go to state 19

    parameter_with_type            shift and go to state 88
    parameter_list                 shift and go to state 115
    variable_type                  shift and go to state 89
    identifier                     shift and go to state 23
    array_type                     shift and go to state 38

state 103

    (109) parameter_with_type -> variable_type identifier .

    ,               reduce using rule 109 (parameter_with_type -> variable_type identifier .)
    )               reduce using rule 109 (parameter_with_type -> variable_type identifier .)


state 104

    (13) expression -> expression + expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    ;               reduce using rule 13 (expression -> expression + expression .)
    +               reduce using rule 13 (expression -> expression + expression .)
    -               reduce using rule 13 (expression -> expression + expression .)
    %               reduce using rule 13 (expression -> expression + expression .)
    )               reduce using rule 13 (expression -> expression + expression .)
    ,               reduce using rule 13 (expression -> expression + expression .)
    *               shift and go to state 93
    /               shift and go to state 94

  ! *               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 91 ]
  ! -               [ shift and go to state 92 ]
  ! %               [ shift and go to state 95 ]


state 105

    (14) expression -> expression - expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    ;               reduce using rule 14 (expression -> expression - expression .)
    +               reduce using rule 14 (expression -> expression - expression .)
    -               reduce using rule 14 (expression -> expression - expression .)
    %               reduce using rule 14 (expression -> expression - expression .)
    )               reduce using rule 14 (expression -> expression - expression .)
    ,               reduce using rule 14 (expression -> expression - expression .)
    *               shift and go to state 93
    /               shift and go to state 94

  ! *               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 91 ]
  ! -               [ shift and go to state 92 ]
  ! %               [ shift and go to state 95 ]


state 106

    (15) expression -> expression * expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    ;               reduce using rule 15 (expression -> expression * expression .)
    +               reduce using rule 15 (expression -> expression * expression .)
    -               reduce using rule 15 (expression -> expression * expression .)
    *               reduce using rule 15 (expression -> expression * expression .)
    /               reduce using rule 15 (expression -> expression * expression .)
    %               reduce using rule 15 (expression -> expression * expression .)
    )               reduce using rule 15 (expression -> expression * expression .)
    ,               reduce using rule 15 (expression -> expression * expression .)

  ! +               [ shift and go to state 91 ]
  ! -               [ shift and go to state 92 ]
  ! *               [ shift and go to state 93 ]
  ! /               [ shift and go to state 94 ]
  ! %               [ shift and go to state 95 ]


state 107

    (16) expression -> expression / expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    ;               reduce using rule 16 (expression -> expression / expression .)
    +               reduce using rule 16 (expression -> expression / expression .)
    -               reduce using rule 16 (expression -> expression / expression .)
    *               reduce using rule 16 (expression -> expression / expression .)
    /               reduce using rule 16 (expression -> expression / expression .)
    %               reduce using rule 16 (expression -> expression / expression .)
    )               reduce using rule 16 (expression -> expression / expression .)
    ,               reduce using rule 16 (expression -> expression / expression .)

  ! +               [ shift and go to state 91 ]
  ! -               [ shift and go to state 92 ]
  ! *               [ shift and go to state 93 ]
  ! /               [ shift and go to state 94 ]
  ! %               [ shift and go to state 95 ]


state 108

    (17) expression -> expression % expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    ;               reduce using rule 17 (expression -> expression % expression .)
    )               reduce using rule 17 (expression -> expression % expression .)
    ,               reduce using rule 17 (expression -> expression % expression .)
    +               shift and go to state 91
    -               shift and go to state 92
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95

  ! +               [ reduce using rule 17 (expression -> expression % expression .) ]
  ! -               [ reduce using rule 17 (expression -> expression % expression .) ]
  ! *               [ reduce using rule 17 (expression -> expression % expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression % expression .) ]
  ! %               [ reduce using rule 17 (expression -> expression % expression .) ]


state 109

    (18) expression -> ( expression ) .

    ;               reduce using rule 18 (expression -> ( expression ) .)
    +               reduce using rule 18 (expression -> ( expression ) .)
    -               reduce using rule 18 (expression -> ( expression ) .)
    *               reduce using rule 18 (expression -> ( expression ) .)
    /               reduce using rule 18 (expression -> ( expression ) .)
    %               reduce using rule 18 (expression -> ( expression ) .)
    )               reduce using rule 18 (expression -> ( expression ) .)
    ,               reduce using rule 18 (expression -> ( expression ) .)


state 110

    (82) method_call -> qualified_identifier ( argument_list . )

    )               shift and go to state 116


state 111

    (86) argument_list -> expression .
    (87) argument_list -> expression . , argument_list
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    )               reduce using rule 86 (argument_list -> expression .)
    ,               shift and go to state 117
    +               shift and go to state 91
    -               shift and go to state 92
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 112

    (88) argument_list -> empty .

    )               reduce using rule 88 (argument_list -> empty .)


state 113

    (94) new_statement -> NEW qualified_identifier ( . argument_list )
    (86) argument_list -> . expression
    (87) argument_list -> . expression , argument_list
    (88) argument_list -> . empty
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (95) empty -> .
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    )               reduce using rule 95 (empty -> .)
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    qualified_identifier           shift and go to state 81
    argument_list                  shift and go to state 118
    expression                     shift and go to state 111
    empty                          shift and go to state 112
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 114

    (104) method -> class_modifier_list identifier ( parameter_list_or_empty ) { . statement_list_or_empty }
    (110) statement_list_or_empty -> . statement_list
    (111) statement_list_or_empty -> . empty
    (112) statement_list -> . statement_with_semicolon_or_comment
    (113) statement_list -> . statement_list statement_with_semicolon_or_comment
    (95) empty -> .
    (8) statement_with_semicolon_or_comment -> . statement_without_semicolon ;
    (9) statement_with_semicolon_or_comment -> . if_statement
    (10) statement_with_semicolon_or_comment -> . while_statement
    (11) statement_with_semicolon_or_comment -> . comment_statement
    (3) statement_without_semicolon -> . variable_declaration
    (4) statement_without_semicolon -> . variable_initialization
    (5) statement_without_semicolon -> . expression_statement
    (6) statement_without_semicolon -> . return_statement
    (7) statement_without_semicolon -> . variable_increment
    (23) if_statement -> . IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty
    (84) while_statement -> . WHILE ( comparison_expression ) { statement_list_or_empty }
    (91) comment_statement -> . comment
    (22) variable_declaration -> . variable_type identifier
    (27) variable_initialization -> . variable_type identifier = expression
    (43) expression_statement -> . expression
    (56) return_statement -> . RETURN expression
    (57) return_statement -> . RETURN empty
    (68) variable_increment -> . identifier + +
    (69) variable_increment -> . identifier INC expression
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (81) identifier -> . ID
    (44) multi_line_comment -> . MULTI_LINE_COMMENT
    (83) array_type -> . variable_type [ ]
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )

    }               reduce using rule 95 (empty -> .)
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    RETURN          shift and go to state 138
    SINGLE_LINE_COMMENT shift and go to state 14
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    (               shift and go to state 74
    ID              shift and go to state 19
    MULTI_LINE_COMMENT shift and go to state 16
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84

    identifier                     shift and go to state 119
    statement_list_or_empty        shift and go to state 120
    statement_list                 shift and go to state 121
    empty                          shift and go to state 122
    statement_with_semicolon_or_comment shift and go to state 123
    statement_without_semicolon    shift and go to state 124
    if_statement                   shift and go to state 125
    while_statement                shift and go to state 126
    comment_statement              shift and go to state 127
    variable_declaration           shift and go to state 128
    variable_initialization        shift and go to state 129
    expression_statement           shift and go to state 130
    return_statement               shift and go to state 131
    variable_increment             shift and go to state 132
    comment                        shift and go to state 135
    variable_type                  shift and go to state 136
    expression                     shift and go to state 137
    multi_line_comment             shift and go to state 15
    array_type                     shift and go to state 38
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83

state 115

    (108) parameter_list -> parameter_with_type , parameter_list .

    )               reduce using rule 108 (parameter_list -> parameter_with_type , parameter_list .)


state 116

    (82) method_call -> qualified_identifier ( argument_list ) .

    ;               reduce using rule 82 (method_call -> qualified_identifier ( argument_list ) .)
    +               reduce using rule 82 (method_call -> qualified_identifier ( argument_list ) .)
    -               reduce using rule 82 (method_call -> qualified_identifier ( argument_list ) .)
    *               reduce using rule 82 (method_call -> qualified_identifier ( argument_list ) .)
    /               reduce using rule 82 (method_call -> qualified_identifier ( argument_list ) .)
    %               reduce using rule 82 (method_call -> qualified_identifier ( argument_list ) .)
    )               reduce using rule 82 (method_call -> qualified_identifier ( argument_list ) .)
    ,               reduce using rule 82 (method_call -> qualified_identifier ( argument_list ) .)


state 117

    (87) argument_list -> expression , . argument_list
    (86) argument_list -> . expression
    (87) argument_list -> . expression , argument_list
    (88) argument_list -> . empty
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (95) empty -> .
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    )               reduce using rule 95 (empty -> .)
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    expression                     shift and go to state 111
    argument_list                  shift and go to state 139
    empty                          shift and go to state 112
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 118

    (94) new_statement -> NEW qualified_identifier ( argument_list . )

    )               shift and go to state 140


state 119

    (68) variable_increment -> identifier . + +
    (69) variable_increment -> identifier . INC expression
    (58) variable_type -> identifier .
    (89) qualified_identifier -> identifier .
    (90) qualified_identifier -> identifier . . qualified_identifier

  ! shift/reduce conflict for + resolved as shift
    +               shift and go to state 141
    INC             shift and go to state 142
    [               reduce using rule 58 (variable_type -> identifier .)
    ID              reduce using rule 58 (variable_type -> identifier .)
    (               reduce using rule 89 (qualified_identifier -> identifier .)
    -               reduce using rule 89 (qualified_identifier -> identifier .)
    *               reduce using rule 89 (qualified_identifier -> identifier .)
    /               reduce using rule 89 (qualified_identifier -> identifier .)
    %               reduce using rule 89 (qualified_identifier -> identifier .)
    ;               reduce using rule 89 (qualified_identifier -> identifier .)
    .               shift and go to state 42

  ! +               [ reduce using rule 89 (qualified_identifier -> identifier .) ]


state 120

    (104) method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty . }

    }               shift and go to state 143


state 121

    (110) statement_list_or_empty -> statement_list .
    (113) statement_list -> statement_list . statement_with_semicolon_or_comment
    (8) statement_with_semicolon_or_comment -> . statement_without_semicolon ;
    (9) statement_with_semicolon_or_comment -> . if_statement
    (10) statement_with_semicolon_or_comment -> . while_statement
    (11) statement_with_semicolon_or_comment -> . comment_statement
    (3) statement_without_semicolon -> . variable_declaration
    (4) statement_without_semicolon -> . variable_initialization
    (5) statement_without_semicolon -> . expression_statement
    (6) statement_without_semicolon -> . return_statement
    (7) statement_without_semicolon -> . variable_increment
    (23) if_statement -> . IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty
    (84) while_statement -> . WHILE ( comparison_expression ) { statement_list_or_empty }
    (91) comment_statement -> . comment
    (22) variable_declaration -> . variable_type identifier
    (27) variable_initialization -> . variable_type identifier = expression
    (43) expression_statement -> . expression
    (56) return_statement -> . RETURN expression
    (57) return_statement -> . RETURN empty
    (68) variable_increment -> . identifier + +
    (69) variable_increment -> . identifier INC expression
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (81) identifier -> . ID
    (44) multi_line_comment -> . MULTI_LINE_COMMENT
    (83) array_type -> . variable_type [ ]
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )

    }               reduce using rule 110 (statement_list_or_empty -> statement_list .)
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    RETURN          shift and go to state 138
    SINGLE_LINE_COMMENT shift and go to state 14
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    (               shift and go to state 74
    ID              shift and go to state 19
    MULTI_LINE_COMMENT shift and go to state 16
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84

    statement_with_semicolon_or_comment shift and go to state 144
    statement_without_semicolon    shift and go to state 124
    if_statement                   shift and go to state 125
    while_statement                shift and go to state 126
    comment_statement              shift and go to state 127
    variable_declaration           shift and go to state 128
    variable_initialization        shift and go to state 129
    expression_statement           shift and go to state 130
    return_statement               shift and go to state 131
    variable_increment             shift and go to state 132
    comment                        shift and go to state 135
    variable_type                  shift and go to state 136
    identifier                     shift and go to state 119
    expression                     shift and go to state 137
    multi_line_comment             shift and go to state 15
    array_type                     shift and go to state 38
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83

state 122

    (111) statement_list_or_empty -> empty .

    }               reduce using rule 111 (statement_list_or_empty -> empty .)


state 123

    (112) statement_list -> statement_with_semicolon_or_comment .

    IF              reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    WHILE           reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    RETURN          reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    SINGLE_LINE_COMMENT reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    BYTE            reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    SHORT           reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    CHAR            reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    INT             reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    LONG            reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    FLOAT           reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    DOUBLE          reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    BOOLEAN         reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    (               reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    ID              reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    MULTI_LINE_COMMENT reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    DEC_LIT         reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    FLOAT_LIT       reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    STR_LIT         reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    CHAR_LIT        reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    -               reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    NEW             reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)
    }               reduce using rule 112 (statement_list -> statement_with_semicolon_or_comment .)


state 124

    (8) statement_with_semicolon_or_comment -> statement_without_semicolon . ;

    ;               shift and go to state 145


state 125

    (9) statement_with_semicolon_or_comment -> if_statement .

    IF              reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    WHILE           reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    RETURN          reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    SINGLE_LINE_COMMENT reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    BYTE            reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    SHORT           reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    CHAR            reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    INT             reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    LONG            reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    FLOAT           reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    DOUBLE          reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    BOOLEAN         reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    (               reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    ID              reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    MULTI_LINE_COMMENT reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    DEC_LIT         reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    FLOAT_LIT       reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    STR_LIT         reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    CHAR_LIT        reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    -               reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    NEW             reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)
    }               reduce using rule 9 (statement_with_semicolon_or_comment -> if_statement .)


state 126

    (10) statement_with_semicolon_or_comment -> while_statement .

    IF              reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    WHILE           reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    RETURN          reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    SINGLE_LINE_COMMENT reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    BYTE            reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    SHORT           reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    CHAR            reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    INT             reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    LONG            reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    FLOAT           reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    DOUBLE          reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    BOOLEAN         reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    (               reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    ID              reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    MULTI_LINE_COMMENT reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    DEC_LIT         reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    FLOAT_LIT       reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    STR_LIT         reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    CHAR_LIT        reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    -               reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    NEW             reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)
    }               reduce using rule 10 (statement_with_semicolon_or_comment -> while_statement .)


state 127

    (11) statement_with_semicolon_or_comment -> comment_statement .

    IF              reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    WHILE           reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    RETURN          reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    SINGLE_LINE_COMMENT reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    BYTE            reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    SHORT           reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    CHAR            reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    INT             reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    LONG            reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    FLOAT           reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    DOUBLE          reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    BOOLEAN         reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    (               reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    ID              reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    MULTI_LINE_COMMENT reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    DEC_LIT         reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    FLOAT_LIT       reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    STR_LIT         reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    CHAR_LIT        reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    -               reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    NEW             reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)
    }               reduce using rule 11 (statement_with_semicolon_or_comment -> comment_statement .)


state 128

    (3) statement_without_semicolon -> variable_declaration .

    ;               reduce using rule 3 (statement_without_semicolon -> variable_declaration .)


state 129

    (4) statement_without_semicolon -> variable_initialization .

    ;               reduce using rule 4 (statement_without_semicolon -> variable_initialization .)


state 130

    (5) statement_without_semicolon -> expression_statement .

    ;               reduce using rule 5 (statement_without_semicolon -> expression_statement .)


state 131

    (6) statement_without_semicolon -> return_statement .

    ;               reduce using rule 6 (statement_without_semicolon -> return_statement .)


state 132

    (7) statement_without_semicolon -> variable_increment .

    ;               reduce using rule 7 (statement_without_semicolon -> variable_increment .)


state 133

    (23) if_statement -> IF . ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty

    (               shift and go to state 146


state 134

    (84) while_statement -> WHILE . ( comparison_expression ) { statement_list_or_empty }

    (               shift and go to state 147


state 135

    (91) comment_statement -> comment .

    IF              reduce using rule 91 (comment_statement -> comment .)
    WHILE           reduce using rule 91 (comment_statement -> comment .)
    RETURN          reduce using rule 91 (comment_statement -> comment .)
    SINGLE_LINE_COMMENT reduce using rule 91 (comment_statement -> comment .)
    BYTE            reduce using rule 91 (comment_statement -> comment .)
    SHORT           reduce using rule 91 (comment_statement -> comment .)
    CHAR            reduce using rule 91 (comment_statement -> comment .)
    INT             reduce using rule 91 (comment_statement -> comment .)
    LONG            reduce using rule 91 (comment_statement -> comment .)
    FLOAT           reduce using rule 91 (comment_statement -> comment .)
    DOUBLE          reduce using rule 91 (comment_statement -> comment .)
    BOOLEAN         reduce using rule 91 (comment_statement -> comment .)
    (               reduce using rule 91 (comment_statement -> comment .)
    ID              reduce using rule 91 (comment_statement -> comment .)
    MULTI_LINE_COMMENT reduce using rule 91 (comment_statement -> comment .)
    DEC_LIT         reduce using rule 91 (comment_statement -> comment .)
    FLOAT_LIT       reduce using rule 91 (comment_statement -> comment .)
    STR_LIT         reduce using rule 91 (comment_statement -> comment .)
    CHAR_LIT        reduce using rule 91 (comment_statement -> comment .)
    -               reduce using rule 91 (comment_statement -> comment .)
    NEW             reduce using rule 91 (comment_statement -> comment .)
    }               reduce using rule 91 (comment_statement -> comment .)


state 136

    (22) variable_declaration -> variable_type . identifier
    (27) variable_initialization -> variable_type . identifier = expression
    (83) array_type -> variable_type . [ ]
    (81) identifier -> . ID

    [               shift and go to state 48
    ID              shift and go to state 19

    identifier                     shift and go to state 148

state 137

    (43) expression_statement -> expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    ;               reduce using rule 43 (expression_statement -> expression .)
    +               shift and go to state 91
    -               shift and go to state 92
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 138

    (56) return_statement -> RETURN . expression
    (57) return_statement -> RETURN . empty
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (95) empty -> .
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    ;               reduce using rule 95 (empty -> .)
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    expression                     shift and go to state 149
    empty                          shift and go to state 150
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83
    identifier                     shift and go to state 18

state 139

    (87) argument_list -> expression , argument_list .

    )               reduce using rule 87 (argument_list -> expression , argument_list .)


state 140

    (94) new_statement -> NEW qualified_identifier ( argument_list ) .

    ;               reduce using rule 94 (new_statement -> NEW qualified_identifier ( argument_list ) .)
    +               reduce using rule 94 (new_statement -> NEW qualified_identifier ( argument_list ) .)
    -               reduce using rule 94 (new_statement -> NEW qualified_identifier ( argument_list ) .)
    *               reduce using rule 94 (new_statement -> NEW qualified_identifier ( argument_list ) .)
    /               reduce using rule 94 (new_statement -> NEW qualified_identifier ( argument_list ) .)
    %               reduce using rule 94 (new_statement -> NEW qualified_identifier ( argument_list ) .)
    )               reduce using rule 94 (new_statement -> NEW qualified_identifier ( argument_list ) .)
    ,               reduce using rule 94 (new_statement -> NEW qualified_identifier ( argument_list ) .)


state 141

    (68) variable_increment -> identifier + . +

    +               shift and go to state 151


state 142

    (69) variable_increment -> identifier INC . expression
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    identifier                     shift and go to state 18
    expression                     shift and go to state 152
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83

state 143

    (104) method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .

    SINGLE_LINE_COMMENT reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    MULTI_LINE_COMMENT reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    PUBLIC          reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    PRIVATE         reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    VOID            reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    STATIC          reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    BYTE            reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    SHORT           reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    CHAR            reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    INT             reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    LONG            reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    FLOAT           reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    DOUBLE          reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    BOOLEAN         reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    ID              reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)
    }               reduce using rule 104 (method -> class_modifier_list identifier ( parameter_list_or_empty ) { statement_list_or_empty } .)


state 144

    (113) statement_list -> statement_list statement_with_semicolon_or_comment .

    IF              reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    WHILE           reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    RETURN          reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    SINGLE_LINE_COMMENT reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    BYTE            reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    SHORT           reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    CHAR            reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    INT             reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    LONG            reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    FLOAT           reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    DOUBLE          reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    BOOLEAN         reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    (               reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    ID              reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    MULTI_LINE_COMMENT reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    DEC_LIT         reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    FLOAT_LIT       reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    STR_LIT         reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    CHAR_LIT        reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    -               reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    NEW             reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)
    }               reduce using rule 113 (statement_list -> statement_list statement_with_semicolon_or_comment .)


state 145

    (8) statement_with_semicolon_or_comment -> statement_without_semicolon ; .

    IF              reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    WHILE           reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    RETURN          reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    SINGLE_LINE_COMMENT reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    BYTE            reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    SHORT           reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    CHAR            reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    INT             reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    LONG            reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    FLOAT           reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    DOUBLE          reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    BOOLEAN         reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    (               reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    ID              reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    MULTI_LINE_COMMENT reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    DEC_LIT         reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    FLOAT_LIT       reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    STR_LIT         reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    CHAR_LIT        reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    -               reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    NEW             reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)
    }               reduce using rule 8 (statement_with_semicolon_or_comment -> statement_without_semicolon ; .)


state 146

    (23) if_statement -> IF ( . comparison_expression ) { statement_list_or_empty } else_statement_or_empty
    (28) comparison_expression -> . comparison_expression = = comparison_expression
    (29) comparison_expression -> . comparison_expression ! = comparison_expression
    (30) comparison_expression -> . comparison_expression > = comparison_expression
    (31) comparison_expression -> . comparison_expression < = comparison_expression
    (32) comparison_expression -> . comparison_expression < comparison_expression
    (33) comparison_expression -> . comparison_expression > comparison_expression
    (34) comparison_expression -> . TRUE
    (35) comparison_expression -> . FALSE

    TRUE            shift and go to state 154
    FALSE           shift and go to state 155

    comparison_expression          shift and go to state 153

state 147

    (84) while_statement -> WHILE ( . comparison_expression ) { statement_list_or_empty }
    (28) comparison_expression -> . comparison_expression = = comparison_expression
    (29) comparison_expression -> . comparison_expression ! = comparison_expression
    (30) comparison_expression -> . comparison_expression > = comparison_expression
    (31) comparison_expression -> . comparison_expression < = comparison_expression
    (32) comparison_expression -> . comparison_expression < comparison_expression
    (33) comparison_expression -> . comparison_expression > comparison_expression
    (34) comparison_expression -> . TRUE
    (35) comparison_expression -> . FALSE

    TRUE            shift and go to state 154
    FALSE           shift and go to state 155

    comparison_expression          shift and go to state 156

state 148

    (22) variable_declaration -> variable_type identifier .
    (27) variable_initialization -> variable_type identifier . = expression

    ;               reduce using rule 22 (variable_declaration -> variable_type identifier .)
    =               shift and go to state 157


state 149

    (56) return_statement -> RETURN expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    ;               reduce using rule 56 (return_statement -> RETURN expression .)
    +               shift and go to state 91
    -               shift and go to state 92
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 150

    (57) return_statement -> RETURN empty .

    ;               reduce using rule 57 (return_statement -> RETURN empty .)


state 151

    (68) variable_increment -> identifier + + .

    ;               reduce using rule 68 (variable_increment -> identifier + + .)


state 152

    (69) variable_increment -> identifier INC expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    ;               reduce using rule 69 (variable_increment -> identifier INC expression .)
    +               shift and go to state 91
    -               shift and go to state 92
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 153

    (23) if_statement -> IF ( comparison_expression . ) { statement_list_or_empty } else_statement_or_empty
    (28) comparison_expression -> comparison_expression . = = comparison_expression
    (29) comparison_expression -> comparison_expression . ! = comparison_expression
    (30) comparison_expression -> comparison_expression . > = comparison_expression
    (31) comparison_expression -> comparison_expression . < = comparison_expression
    (32) comparison_expression -> comparison_expression . < comparison_expression
    (33) comparison_expression -> comparison_expression . > comparison_expression

    )               shift and go to state 158
    =               shift and go to state 159
    !               shift and go to state 160
    >               shift and go to state 161
    <               shift and go to state 162


state 154

    (34) comparison_expression -> TRUE .

    )               reduce using rule 34 (comparison_expression -> TRUE .)
    =               reduce using rule 34 (comparison_expression -> TRUE .)
    !               reduce using rule 34 (comparison_expression -> TRUE .)
    >               reduce using rule 34 (comparison_expression -> TRUE .)
    <               reduce using rule 34 (comparison_expression -> TRUE .)


state 155

    (35) comparison_expression -> FALSE .

    )               reduce using rule 35 (comparison_expression -> FALSE .)
    =               reduce using rule 35 (comparison_expression -> FALSE .)
    !               reduce using rule 35 (comparison_expression -> FALSE .)
    >               reduce using rule 35 (comparison_expression -> FALSE .)
    <               reduce using rule 35 (comparison_expression -> FALSE .)


state 156

    (84) while_statement -> WHILE ( comparison_expression . ) { statement_list_or_empty }
    (28) comparison_expression -> comparison_expression . = = comparison_expression
    (29) comparison_expression -> comparison_expression . ! = comparison_expression
    (30) comparison_expression -> comparison_expression . > = comparison_expression
    (31) comparison_expression -> comparison_expression . < = comparison_expression
    (32) comparison_expression -> comparison_expression . < comparison_expression
    (33) comparison_expression -> comparison_expression . > comparison_expression

    )               shift and go to state 163
    =               shift and go to state 159
    !               shift and go to state 160
    >               shift and go to state 161
    <               shift and go to state 162


state 157

    (27) variable_initialization -> variable_type identifier = . expression
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )
    (81) identifier -> . ID

    (               shift and go to state 74
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84
    ID              shift and go to state 19

    identifier                     shift and go to state 18
    expression                     shift and go to state 164
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83

state 158

    (23) if_statement -> IF ( comparison_expression ) . { statement_list_or_empty } else_statement_or_empty

    {               shift and go to state 165


state 159

    (28) comparison_expression -> comparison_expression = . = comparison_expression

    =               shift and go to state 166


state 160

    (29) comparison_expression -> comparison_expression ! . = comparison_expression

    =               shift and go to state 167


state 161

    (30) comparison_expression -> comparison_expression > . = comparison_expression
    (33) comparison_expression -> comparison_expression > . comparison_expression
    (28) comparison_expression -> . comparison_expression = = comparison_expression
    (29) comparison_expression -> . comparison_expression ! = comparison_expression
    (30) comparison_expression -> . comparison_expression > = comparison_expression
    (31) comparison_expression -> . comparison_expression < = comparison_expression
    (32) comparison_expression -> . comparison_expression < comparison_expression
    (33) comparison_expression -> . comparison_expression > comparison_expression
    (34) comparison_expression -> . TRUE
    (35) comparison_expression -> . FALSE

    =               shift and go to state 169
    TRUE            shift and go to state 154
    FALSE           shift and go to state 155

    comparison_expression          shift and go to state 168

state 162

    (31) comparison_expression -> comparison_expression < . = comparison_expression
    (32) comparison_expression -> comparison_expression < . comparison_expression
    (28) comparison_expression -> . comparison_expression = = comparison_expression
    (29) comparison_expression -> . comparison_expression ! = comparison_expression
    (30) comparison_expression -> . comparison_expression > = comparison_expression
    (31) comparison_expression -> . comparison_expression < = comparison_expression
    (32) comparison_expression -> . comparison_expression < comparison_expression
    (33) comparison_expression -> . comparison_expression > comparison_expression
    (34) comparison_expression -> . TRUE
    (35) comparison_expression -> . FALSE

    =               shift and go to state 171
    TRUE            shift and go to state 154
    FALSE           shift and go to state 155

    comparison_expression          shift and go to state 170

state 163

    (84) while_statement -> WHILE ( comparison_expression ) . { statement_list_or_empty }

    {               shift and go to state 172


state 164

    (27) variable_initialization -> variable_type identifier = expression .
    (13) expression -> expression . + expression
    (14) expression -> expression . - expression
    (15) expression -> expression . * expression
    (16) expression -> expression . / expression
    (17) expression -> expression . % expression

    ;               reduce using rule 27 (variable_initialization -> variable_type identifier = expression .)
    +               shift and go to state 91
    -               shift and go to state 92
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 165

    (23) if_statement -> IF ( comparison_expression ) { . statement_list_or_empty } else_statement_or_empty
    (110) statement_list_or_empty -> . statement_list
    (111) statement_list_or_empty -> . empty
    (112) statement_list -> . statement_with_semicolon_or_comment
    (113) statement_list -> . statement_list statement_with_semicolon_or_comment
    (95) empty -> .
    (8) statement_with_semicolon_or_comment -> . statement_without_semicolon ;
    (9) statement_with_semicolon_or_comment -> . if_statement
    (10) statement_with_semicolon_or_comment -> . while_statement
    (11) statement_with_semicolon_or_comment -> . comment_statement
    (3) statement_without_semicolon -> . variable_declaration
    (4) statement_without_semicolon -> . variable_initialization
    (5) statement_without_semicolon -> . expression_statement
    (6) statement_without_semicolon -> . return_statement
    (7) statement_without_semicolon -> . variable_increment
    (23) if_statement -> . IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty
    (84) while_statement -> . WHILE ( comparison_expression ) { statement_list_or_empty }
    (91) comment_statement -> . comment
    (22) variable_declaration -> . variable_type identifier
    (27) variable_initialization -> . variable_type identifier = expression
    (43) expression_statement -> . expression
    (56) return_statement -> . RETURN expression
    (57) return_statement -> . RETURN empty
    (68) variable_increment -> . identifier + +
    (69) variable_increment -> . identifier INC expression
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (81) identifier -> . ID
    (44) multi_line_comment -> . MULTI_LINE_COMMENT
    (83) array_type -> . variable_type [ ]
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )

    }               reduce using rule 95 (empty -> .)
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    RETURN          shift and go to state 138
    SINGLE_LINE_COMMENT shift and go to state 14
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    (               shift and go to state 74
    ID              shift and go to state 19
    MULTI_LINE_COMMENT shift and go to state 16
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84

    statement_list_or_empty        shift and go to state 173
    statement_list                 shift and go to state 121
    empty                          shift and go to state 122
    statement_with_semicolon_or_comment shift and go to state 123
    statement_without_semicolon    shift and go to state 124
    if_statement                   shift and go to state 125
    while_statement                shift and go to state 126
    comment_statement              shift and go to state 127
    variable_declaration           shift and go to state 128
    variable_initialization        shift and go to state 129
    expression_statement           shift and go to state 130
    return_statement               shift and go to state 131
    variable_increment             shift and go to state 132
    comment                        shift and go to state 135
    variable_type                  shift and go to state 136
    identifier                     shift and go to state 119
    expression                     shift and go to state 137
    multi_line_comment             shift and go to state 15
    array_type                     shift and go to state 38
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83

state 166

    (28) comparison_expression -> comparison_expression = = . comparison_expression
    (28) comparison_expression -> . comparison_expression = = comparison_expression
    (29) comparison_expression -> . comparison_expression ! = comparison_expression
    (30) comparison_expression -> . comparison_expression > = comparison_expression
    (31) comparison_expression -> . comparison_expression < = comparison_expression
    (32) comparison_expression -> . comparison_expression < comparison_expression
    (33) comparison_expression -> . comparison_expression > comparison_expression
    (34) comparison_expression -> . TRUE
    (35) comparison_expression -> . FALSE

    TRUE            shift and go to state 154
    FALSE           shift and go to state 155

    comparison_expression          shift and go to state 174

state 167

    (29) comparison_expression -> comparison_expression ! = . comparison_expression
    (28) comparison_expression -> . comparison_expression = = comparison_expression
    (29) comparison_expression -> . comparison_expression ! = comparison_expression
    (30) comparison_expression -> . comparison_expression > = comparison_expression
    (31) comparison_expression -> . comparison_expression < = comparison_expression
    (32) comparison_expression -> . comparison_expression < comparison_expression
    (33) comparison_expression -> . comparison_expression > comparison_expression
    (34) comparison_expression -> . TRUE
    (35) comparison_expression -> . FALSE

    TRUE            shift and go to state 154
    FALSE           shift and go to state 155

    comparison_expression          shift and go to state 175

state 168

    (33) comparison_expression -> comparison_expression > comparison_expression .
    (28) comparison_expression -> comparison_expression . = = comparison_expression
    (29) comparison_expression -> comparison_expression . ! = comparison_expression
    (30) comparison_expression -> comparison_expression . > = comparison_expression
    (31) comparison_expression -> comparison_expression . < = comparison_expression
    (32) comparison_expression -> comparison_expression . < comparison_expression
    (33) comparison_expression -> comparison_expression . > comparison_expression

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 33 (comparison_expression -> comparison_expression > comparison_expression .)
    =               shift and go to state 159
    !               shift and go to state 160
    >               shift and go to state 161
    <               shift and go to state 162

  ! =               [ reduce using rule 33 (comparison_expression -> comparison_expression > comparison_expression .) ]
  ! !               [ reduce using rule 33 (comparison_expression -> comparison_expression > comparison_expression .) ]
  ! >               [ reduce using rule 33 (comparison_expression -> comparison_expression > comparison_expression .) ]
  ! <               [ reduce using rule 33 (comparison_expression -> comparison_expression > comparison_expression .) ]


state 169

    (30) comparison_expression -> comparison_expression > = . comparison_expression
    (28) comparison_expression -> . comparison_expression = = comparison_expression
    (29) comparison_expression -> . comparison_expression ! = comparison_expression
    (30) comparison_expression -> . comparison_expression > = comparison_expression
    (31) comparison_expression -> . comparison_expression < = comparison_expression
    (32) comparison_expression -> . comparison_expression < comparison_expression
    (33) comparison_expression -> . comparison_expression > comparison_expression
    (34) comparison_expression -> . TRUE
    (35) comparison_expression -> . FALSE

    TRUE            shift and go to state 154
    FALSE           shift and go to state 155

    comparison_expression          shift and go to state 176

state 170

    (32) comparison_expression -> comparison_expression < comparison_expression .
    (28) comparison_expression -> comparison_expression . = = comparison_expression
    (29) comparison_expression -> comparison_expression . ! = comparison_expression
    (30) comparison_expression -> comparison_expression . > = comparison_expression
    (31) comparison_expression -> comparison_expression . < = comparison_expression
    (32) comparison_expression -> comparison_expression . < comparison_expression
    (33) comparison_expression -> comparison_expression . > comparison_expression

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 32 (comparison_expression -> comparison_expression < comparison_expression .)
    =               shift and go to state 159
    !               shift and go to state 160
    >               shift and go to state 161
    <               shift and go to state 162

  ! =               [ reduce using rule 32 (comparison_expression -> comparison_expression < comparison_expression .) ]
  ! !               [ reduce using rule 32 (comparison_expression -> comparison_expression < comparison_expression .) ]
  ! >               [ reduce using rule 32 (comparison_expression -> comparison_expression < comparison_expression .) ]
  ! <               [ reduce using rule 32 (comparison_expression -> comparison_expression < comparison_expression .) ]


state 171

    (31) comparison_expression -> comparison_expression < = . comparison_expression
    (28) comparison_expression -> . comparison_expression = = comparison_expression
    (29) comparison_expression -> . comparison_expression ! = comparison_expression
    (30) comparison_expression -> . comparison_expression > = comparison_expression
    (31) comparison_expression -> . comparison_expression < = comparison_expression
    (32) comparison_expression -> . comparison_expression < comparison_expression
    (33) comparison_expression -> . comparison_expression > comparison_expression
    (34) comparison_expression -> . TRUE
    (35) comparison_expression -> . FALSE

    TRUE            shift and go to state 154
    FALSE           shift and go to state 155

    comparison_expression          shift and go to state 177

state 172

    (84) while_statement -> WHILE ( comparison_expression ) { . statement_list_or_empty }
    (110) statement_list_or_empty -> . statement_list
    (111) statement_list_or_empty -> . empty
    (112) statement_list -> . statement_with_semicolon_or_comment
    (113) statement_list -> . statement_list statement_with_semicolon_or_comment
    (95) empty -> .
    (8) statement_with_semicolon_or_comment -> . statement_without_semicolon ;
    (9) statement_with_semicolon_or_comment -> . if_statement
    (10) statement_with_semicolon_or_comment -> . while_statement
    (11) statement_with_semicolon_or_comment -> . comment_statement
    (3) statement_without_semicolon -> . variable_declaration
    (4) statement_without_semicolon -> . variable_initialization
    (5) statement_without_semicolon -> . expression_statement
    (6) statement_without_semicolon -> . return_statement
    (7) statement_without_semicolon -> . variable_increment
    (23) if_statement -> . IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty
    (84) while_statement -> . WHILE ( comparison_expression ) { statement_list_or_empty }
    (91) comment_statement -> . comment
    (22) variable_declaration -> . variable_type identifier
    (27) variable_initialization -> . variable_type identifier = expression
    (43) expression_statement -> . expression
    (56) return_statement -> . RETURN expression
    (57) return_statement -> . RETURN empty
    (68) variable_increment -> . identifier + +
    (69) variable_increment -> . identifier INC expression
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (81) identifier -> . ID
    (44) multi_line_comment -> . MULTI_LINE_COMMENT
    (83) array_type -> . variable_type [ ]
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )

    }               reduce using rule 95 (empty -> .)
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    RETURN          shift and go to state 138
    SINGLE_LINE_COMMENT shift and go to state 14
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    (               shift and go to state 74
    ID              shift and go to state 19
    MULTI_LINE_COMMENT shift and go to state 16
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84

    statement_list_or_empty        shift and go to state 178
    statement_list                 shift and go to state 121
    empty                          shift and go to state 122
    statement_with_semicolon_or_comment shift and go to state 123
    statement_without_semicolon    shift and go to state 124
    if_statement                   shift and go to state 125
    while_statement                shift and go to state 126
    comment_statement              shift and go to state 127
    variable_declaration           shift and go to state 128
    variable_initialization        shift and go to state 129
    expression_statement           shift and go to state 130
    return_statement               shift and go to state 131
    variable_increment             shift and go to state 132
    comment                        shift and go to state 135
    variable_type                  shift and go to state 136
    identifier                     shift and go to state 119
    expression                     shift and go to state 137
    multi_line_comment             shift and go to state 15
    array_type                     shift and go to state 38
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83

state 173

    (23) if_statement -> IF ( comparison_expression ) { statement_list_or_empty . } else_statement_or_empty

    }               shift and go to state 179


state 174

    (28) comparison_expression -> comparison_expression = = comparison_expression .
    (28) comparison_expression -> comparison_expression . = = comparison_expression
    (29) comparison_expression -> comparison_expression . ! = comparison_expression
    (30) comparison_expression -> comparison_expression . > = comparison_expression
    (31) comparison_expression -> comparison_expression . < = comparison_expression
    (32) comparison_expression -> comparison_expression . < comparison_expression
    (33) comparison_expression -> comparison_expression . > comparison_expression

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 28 (comparison_expression -> comparison_expression = = comparison_expression .)
    =               shift and go to state 159
    !               shift and go to state 160
    >               shift and go to state 161
    <               shift and go to state 162

  ! =               [ reduce using rule 28 (comparison_expression -> comparison_expression = = comparison_expression .) ]
  ! !               [ reduce using rule 28 (comparison_expression -> comparison_expression = = comparison_expression .) ]
  ! >               [ reduce using rule 28 (comparison_expression -> comparison_expression = = comparison_expression .) ]
  ! <               [ reduce using rule 28 (comparison_expression -> comparison_expression = = comparison_expression .) ]


state 175

    (29) comparison_expression -> comparison_expression ! = comparison_expression .
    (28) comparison_expression -> comparison_expression . = = comparison_expression
    (29) comparison_expression -> comparison_expression . ! = comparison_expression
    (30) comparison_expression -> comparison_expression . > = comparison_expression
    (31) comparison_expression -> comparison_expression . < = comparison_expression
    (32) comparison_expression -> comparison_expression . < comparison_expression
    (33) comparison_expression -> comparison_expression . > comparison_expression

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 29 (comparison_expression -> comparison_expression ! = comparison_expression .)
    =               shift and go to state 159
    !               shift and go to state 160
    >               shift and go to state 161
    <               shift and go to state 162

  ! =               [ reduce using rule 29 (comparison_expression -> comparison_expression ! = comparison_expression .) ]
  ! !               [ reduce using rule 29 (comparison_expression -> comparison_expression ! = comparison_expression .) ]
  ! >               [ reduce using rule 29 (comparison_expression -> comparison_expression ! = comparison_expression .) ]
  ! <               [ reduce using rule 29 (comparison_expression -> comparison_expression ! = comparison_expression .) ]


state 176

    (30) comparison_expression -> comparison_expression > = comparison_expression .
    (28) comparison_expression -> comparison_expression . = = comparison_expression
    (29) comparison_expression -> comparison_expression . ! = comparison_expression
    (30) comparison_expression -> comparison_expression . > = comparison_expression
    (31) comparison_expression -> comparison_expression . < = comparison_expression
    (32) comparison_expression -> comparison_expression . < comparison_expression
    (33) comparison_expression -> comparison_expression . > comparison_expression

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 30 (comparison_expression -> comparison_expression > = comparison_expression .)
    =               shift and go to state 159
    !               shift and go to state 160
    >               shift and go to state 161
    <               shift and go to state 162

  ! =               [ reduce using rule 30 (comparison_expression -> comparison_expression > = comparison_expression .) ]
  ! !               [ reduce using rule 30 (comparison_expression -> comparison_expression > = comparison_expression .) ]
  ! >               [ reduce using rule 30 (comparison_expression -> comparison_expression > = comparison_expression .) ]
  ! <               [ reduce using rule 30 (comparison_expression -> comparison_expression > = comparison_expression .) ]


state 177

    (31) comparison_expression -> comparison_expression < = comparison_expression .
    (28) comparison_expression -> comparison_expression . = = comparison_expression
    (29) comparison_expression -> comparison_expression . ! = comparison_expression
    (30) comparison_expression -> comparison_expression . > = comparison_expression
    (31) comparison_expression -> comparison_expression . < = comparison_expression
    (32) comparison_expression -> comparison_expression . < comparison_expression
    (33) comparison_expression -> comparison_expression . > comparison_expression

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    )               reduce using rule 31 (comparison_expression -> comparison_expression < = comparison_expression .)
    =               shift and go to state 159
    !               shift and go to state 160
    >               shift and go to state 161
    <               shift and go to state 162

  ! =               [ reduce using rule 31 (comparison_expression -> comparison_expression < = comparison_expression .) ]
  ! !               [ reduce using rule 31 (comparison_expression -> comparison_expression < = comparison_expression .) ]
  ! >               [ reduce using rule 31 (comparison_expression -> comparison_expression < = comparison_expression .) ]
  ! <               [ reduce using rule 31 (comparison_expression -> comparison_expression < = comparison_expression .) ]


state 178

    (84) while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty . }

    }               shift and go to state 180


state 179

    (23) if_statement -> IF ( comparison_expression ) { statement_list_or_empty } . else_statement_or_empty
    (77) else_statement_or_empty -> . ELSE { statement_list_or_empty }
    (78) else_statement_or_empty -> . empty
    (95) empty -> .

    ELSE            shift and go to state 182
    IF              reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    SINGLE_LINE_COMMENT reduce using rule 95 (empty -> .)
    BYTE            reduce using rule 95 (empty -> .)
    SHORT           reduce using rule 95 (empty -> .)
    CHAR            reduce using rule 95 (empty -> .)
    INT             reduce using rule 95 (empty -> .)
    LONG            reduce using rule 95 (empty -> .)
    FLOAT           reduce using rule 95 (empty -> .)
    DOUBLE          reduce using rule 95 (empty -> .)
    BOOLEAN         reduce using rule 95 (empty -> .)
    (               reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    MULTI_LINE_COMMENT reduce using rule 95 (empty -> .)
    DEC_LIT         reduce using rule 95 (empty -> .)
    FLOAT_LIT       reduce using rule 95 (empty -> .)
    STR_LIT         reduce using rule 95 (empty -> .)
    CHAR_LIT        reduce using rule 95 (empty -> .)
    -               reduce using rule 95 (empty -> .)
    NEW             reduce using rule 95 (empty -> .)
    }               reduce using rule 95 (empty -> .)

    else_statement_or_empty        shift and go to state 181
    empty                          shift and go to state 183

state 180

    (84) while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .

    IF              reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    WHILE           reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    RETURN          reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    SINGLE_LINE_COMMENT reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    BYTE            reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    SHORT           reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    CHAR            reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    INT             reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    LONG            reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    FLOAT           reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    DOUBLE          reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    BOOLEAN         reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    (               reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    ID              reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    MULTI_LINE_COMMENT reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    DEC_LIT         reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    FLOAT_LIT       reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    STR_LIT         reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    CHAR_LIT        reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    -               reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    NEW             reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)
    }               reduce using rule 84 (while_statement -> WHILE ( comparison_expression ) { statement_list_or_empty } .)


state 181

    (23) if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .

    IF              reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    WHILE           reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    RETURN          reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    SINGLE_LINE_COMMENT reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    BYTE            reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    SHORT           reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    CHAR            reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    INT             reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    LONG            reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    FLOAT           reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    DOUBLE          reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    BOOLEAN         reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    (               reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    ID              reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    MULTI_LINE_COMMENT reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    DEC_LIT         reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    FLOAT_LIT       reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    STR_LIT         reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    CHAR_LIT        reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    -               reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    NEW             reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)
    }               reduce using rule 23 (if_statement -> IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty .)


state 182

    (77) else_statement_or_empty -> ELSE . { statement_list_or_empty }

    {               shift and go to state 184


state 183

    (78) else_statement_or_empty -> empty .

    IF              reduce using rule 78 (else_statement_or_empty -> empty .)
    WHILE           reduce using rule 78 (else_statement_or_empty -> empty .)
    RETURN          reduce using rule 78 (else_statement_or_empty -> empty .)
    SINGLE_LINE_COMMENT reduce using rule 78 (else_statement_or_empty -> empty .)
    BYTE            reduce using rule 78 (else_statement_or_empty -> empty .)
    SHORT           reduce using rule 78 (else_statement_or_empty -> empty .)
    CHAR            reduce using rule 78 (else_statement_or_empty -> empty .)
    INT             reduce using rule 78 (else_statement_or_empty -> empty .)
    LONG            reduce using rule 78 (else_statement_or_empty -> empty .)
    FLOAT           reduce using rule 78 (else_statement_or_empty -> empty .)
    DOUBLE          reduce using rule 78 (else_statement_or_empty -> empty .)
    BOOLEAN         reduce using rule 78 (else_statement_or_empty -> empty .)
    (               reduce using rule 78 (else_statement_or_empty -> empty .)
    ID              reduce using rule 78 (else_statement_or_empty -> empty .)
    MULTI_LINE_COMMENT reduce using rule 78 (else_statement_or_empty -> empty .)
    DEC_LIT         reduce using rule 78 (else_statement_or_empty -> empty .)
    FLOAT_LIT       reduce using rule 78 (else_statement_or_empty -> empty .)
    STR_LIT         reduce using rule 78 (else_statement_or_empty -> empty .)
    CHAR_LIT        reduce using rule 78 (else_statement_or_empty -> empty .)
    -               reduce using rule 78 (else_statement_or_empty -> empty .)
    NEW             reduce using rule 78 (else_statement_or_empty -> empty .)
    }               reduce using rule 78 (else_statement_or_empty -> empty .)


state 184

    (77) else_statement_or_empty -> ELSE { . statement_list_or_empty }
    (110) statement_list_or_empty -> . statement_list
    (111) statement_list_or_empty -> . empty
    (112) statement_list -> . statement_with_semicolon_or_comment
    (113) statement_list -> . statement_list statement_with_semicolon_or_comment
    (95) empty -> .
    (8) statement_with_semicolon_or_comment -> . statement_without_semicolon ;
    (9) statement_with_semicolon_or_comment -> . if_statement
    (10) statement_with_semicolon_or_comment -> . while_statement
    (11) statement_with_semicolon_or_comment -> . comment_statement
    (3) statement_without_semicolon -> . variable_declaration
    (4) statement_without_semicolon -> . variable_initialization
    (5) statement_without_semicolon -> . expression_statement
    (6) statement_without_semicolon -> . return_statement
    (7) statement_without_semicolon -> . variable_increment
    (23) if_statement -> . IF ( comparison_expression ) { statement_list_or_empty } else_statement_or_empty
    (84) while_statement -> . WHILE ( comparison_expression ) { statement_list_or_empty }
    (91) comment_statement -> . comment
    (22) variable_declaration -> . variable_type identifier
    (27) variable_initialization -> . variable_type identifier = expression
    (43) expression_statement -> . expression
    (56) return_statement -> . RETURN expression
    (57) return_statement -> . RETURN empty
    (68) variable_increment -> . identifier + +
    (69) variable_increment -> . identifier INC expression
    (36) comment -> . SINGLE_LINE_COMMENT
    (37) comment -> . multi_line_comment
    (58) variable_type -> . identifier
    (59) variable_type -> . BYTE
    (60) variable_type -> . SHORT
    (61) variable_type -> . CHAR
    (62) variable_type -> . INT
    (63) variable_type -> . LONG
    (64) variable_type -> . FLOAT
    (65) variable_type -> . DOUBLE
    (66) variable_type -> . BOOLEAN
    (67) variable_type -> . array_type
    (13) expression -> . expression + expression
    (14) expression -> . expression - expression
    (15) expression -> . expression * expression
    (16) expression -> . expression / expression
    (17) expression -> . expression % expression
    (18) expression -> . ( expression )
    (19) expression -> . factor
    (81) identifier -> . ID
    (44) multi_line_comment -> . MULTI_LINE_COMMENT
    (83) array_type -> . variable_type [ ]
    (47) factor -> . DEC_LIT
    (48) factor -> . FLOAT_LIT
    (49) factor -> . STR_LIT
    (50) factor -> . CHAR_LIT
    (51) factor -> . unary_minus
    (52) factor -> . qualified_identifier
    (53) factor -> . method_call
    (54) factor -> . new_statement
    (75) unary_minus -> . - DEC_LIT
    (76) unary_minus -> . - FLOAT_LIT
    (89) qualified_identifier -> . identifier
    (90) qualified_identifier -> . identifier . qualified_identifier
    (82) method_call -> . qualified_identifier ( argument_list )
    (94) new_statement -> . NEW qualified_identifier ( argument_list )

    }               reduce using rule 95 (empty -> .)
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    RETURN          shift and go to state 138
    SINGLE_LINE_COMMENT shift and go to state 14
    BYTE            shift and go to state 30
    SHORT           shift and go to state 31
    CHAR            shift and go to state 32
    INT             shift and go to state 33
    LONG            shift and go to state 34
    FLOAT           shift and go to state 35
    DOUBLE          shift and go to state 36
    BOOLEAN         shift and go to state 37
    (               shift and go to state 74
    ID              shift and go to state 19
    MULTI_LINE_COMMENT shift and go to state 16
    DEC_LIT         shift and go to state 76
    FLOAT_LIT       shift and go to state 77
    STR_LIT         shift and go to state 78
    CHAR_LIT        shift and go to state 79
    -               shift and go to state 73
    NEW             shift and go to state 84

    statement_list_or_empty        shift and go to state 185
    statement_list                 shift and go to state 121
    empty                          shift and go to state 122
    statement_with_semicolon_or_comment shift and go to state 123
    statement_without_semicolon    shift and go to state 124
    if_statement                   shift and go to state 125
    while_statement                shift and go to state 126
    comment_statement              shift and go to state 127
    variable_declaration           shift and go to state 128
    variable_initialization        shift and go to state 129
    expression_statement           shift and go to state 130
    return_statement               shift and go to state 131
    variable_increment             shift and go to state 132
    comment                        shift and go to state 135
    variable_type                  shift and go to state 136
    identifier                     shift and go to state 119
    expression                     shift and go to state 137
    multi_line_comment             shift and go to state 15
    array_type                     shift and go to state 38
    factor                         shift and go to state 75
    unary_minus                    shift and go to state 80
    qualified_identifier           shift and go to state 81
    method_call                    shift and go to state 82
    new_statement                  shift and go to state 83

state 185

    (77) else_statement_or_empty -> ELSE { statement_list_or_empty . }

    }               shift and go to state 186


state 186

    (77) else_statement_or_empty -> ELSE { statement_list_or_empty } .

    IF              reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    WHILE           reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    RETURN          reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    SINGLE_LINE_COMMENT reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    BYTE            reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    SHORT           reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    CHAR            reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    INT             reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    LONG            reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    FLOAT           reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    DOUBLE          reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    BOOLEAN         reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    (               reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    ID              reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    MULTI_LINE_COMMENT reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    DEC_LIT         reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    FLOAT_LIT       reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    STR_LIT         reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    CHAR_LIT        reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    -               reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    NEW             reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)
    }               reduce using rule 77 (else_statement_or_empty -> ELSE { statement_list_or_empty } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IMPORT in state 3 resolved as shift
WARNING: shift/reduce conflict for SINGLE_LINE_COMMENT in state 3 resolved as shift
WARNING: shift/reduce conflict for MULTI_LINE_COMMENT in state 3 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 7 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 7 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 7 resolved as shift
WARNING: shift/reduce conflict for VOID in state 7 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 7 resolved as shift
WARNING: shift/reduce conflict for SINGLE_LINE_COMMENT in state 7 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 7 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 7 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 7 resolved as shift
WARNING: shift/reduce conflict for INT in state 7 resolved as shift
WARNING: shift/reduce conflict for LONG in state 7 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 7 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 7 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 7 resolved as shift
WARNING: shift/reduce conflict for MULTI_LINE_COMMENT in state 7 resolved as shift
WARNING: shift/reduce conflict for ID in state 7 resolved as shift
WARNING: shift/reduce conflict for SINGLE_LINE_COMMENT in state 12 resolved as shift
WARNING: shift/reduce conflict for MULTI_LINE_COMMENT in state 12 resolved as shift
WARNING: shift/reduce conflict for + in state 108 resolved as shift
WARNING: shift/reduce conflict for - in state 108 resolved as shift
WARNING: shift/reduce conflict for * in state 108 resolved as shift
WARNING: shift/reduce conflict for / in state 108 resolved as shift
WARNING: shift/reduce conflict for % in state 108 resolved as shift
WARNING: shift/reduce conflict for + in state 119 resolved as shift
WARNING: shift/reduce conflict for = in state 168 resolved as shift
WARNING: shift/reduce conflict for ! in state 168 resolved as shift
WARNING: shift/reduce conflict for > in state 168 resolved as shift
WARNING: shift/reduce conflict for < in state 168 resolved as shift
WARNING: shift/reduce conflict for = in state 170 resolved as shift
WARNING: shift/reduce conflict for ! in state 170 resolved as shift
WARNING: shift/reduce conflict for > in state 170 resolved as shift
WARNING: shift/reduce conflict for < in state 170 resolved as shift
WARNING: shift/reduce conflict for = in state 174 resolved as shift
WARNING: shift/reduce conflict for ! in state 174 resolved as shift
WARNING: shift/reduce conflict for > in state 174 resolved as shift
WARNING: shift/reduce conflict for < in state 174 resolved as shift
WARNING: shift/reduce conflict for = in state 175 resolved as shift
WARNING: shift/reduce conflict for ! in state 175 resolved as shift
WARNING: shift/reduce conflict for > in state 175 resolved as shift
WARNING: shift/reduce conflict for < in state 175 resolved as shift
WARNING: shift/reduce conflict for = in state 176 resolved as shift
WARNING: shift/reduce conflict for ! in state 176 resolved as shift
WARNING: shift/reduce conflict for > in state 176 resolved as shift
WARNING: shift/reduce conflict for < in state 176 resolved as shift
WARNING: shift/reduce conflict for = in state 177 resolved as shift
WARNING: shift/reduce conflict for ! in state 177 resolved as shift
WARNING: shift/reduce conflict for > in state 177 resolved as shift
WARNING: shift/reduce conflict for < in state 177 resolved as shift
